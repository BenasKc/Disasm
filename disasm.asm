; Benas Kuƒçinskas
; Disassembler
; Task source: https://klevas.mif.vu.lt/~linas1/KompArch/Disasembleris.htm

; Tasks:
; [x] Read parameters (filename1, filename2)
; [x] Read bytes from file
; [x] Understands "/?" command
; [x] Understands improper arguments
; [x] Finds correct opcode
; [x] Outputs data to file
; [x] Understands segment change prefixes
; [x] Understands 6 MOV command variations
;	[x] MOV reg, reg
;	[x] MOV reg, mem
;	[x]	MOV reg, const
;	[x] MOV mem, reg
; [x] Understands 3 PUSH command variations
;	[x] PUSH reg
;	[x] PUSH mem
;	[x] PUSH const
; [x] Understands 3 POP command variations
; [x] Understands 3 ADD command variations
; [x] Undestrands 2 INC command variations
; [x] Understands 3 SUB command variations
; [X] Understands 2 DEC command variations
; [x] Understands 3 CMP command variations
; [x] Understands MUL command
; [x] Understands DIV command
; [x] Understands 4 CALL command variations
; [x] Understands 4 RET command variations
; [x] Understands 17 jump variations
; [x] Understands LOOP command
; [x] Understands INT command
; [x] Unknown commands print as ??
; [x] Prints the machine code of the commands
; [x] Prints displacement of the command from .CODE start 
; NOTE: disregarding rule of efficiency, reading only one byte from file at once,
; makes it a lot simpler

; REGISTERS:
; AX, AL, AH, BX, BL, BH, CX, CL, CH, DX, DL, DH, IP, SP, BP, SI, DI, [SI], [DI], [BX]

; SEGMENTS:
; CS, DS, SS, ES

; JUMPS:
; JMP, JE, JZ, JNE, JNZ, JG, JNLE, JGE, JNL, JL, JNGE, JLE, JNG, JA, JNBE, JAE, JNB, JB, JNAE
; JBE, JNA, JXCZ, JC, JNC, JO, JNO, JP, JPE, JNP, JPO, JS, JNS

; SKIP 500 is where ret is set
.MODEL SMALL
.STACK 1000h
.DATA

; MAIN PROBLEM - OpcodeIndex keeps changing and procedure ReadFile gets called

Params equ byte ptr es:[80h]
CR equ 0dh
LF equ 0ah
org 100h
.DATA
	OpcodeLength DW 0
    bytes DB 10000 DUP(0)
    filename1 DB 255 DUP(0)
	filename2 DB 255 DUP(0)
	handle1 DW 0
	handle2 DW 0	
	OpenError DB "Unable to open the input file. Terminating", CR, LF, 0
	CreateError DB "Unable to create the output file. Terminating", CR, LF, 0
	CloseError DB "Unable to close file. Terminating", CR, LF, 0
	WriteError DB "Unable to write to file. Terminating", CR, LF, 0
	ReadBuffer DB 255 DUP(0)
	SpaceBuffer DB " ", 0
	NewlineBuffer DB CR, LF, 0
	HelpPrompt DB "/?", 0
	HelpMessage DB "This program is a dissasmbler of .com files. Usage: disasm <input.com> <output>", CR, LF, "Author: Benas Kucinskas I kursas 3 grupe", CR, LF, 0
	Opcode DB 10000 DUP(0)
	OpcodeIndex DW 0
	BracketLeft DB "[", 0
	BracketRight DB "]", 0
	UnknownCommand DB "??", 0
	CurrentAddress DW 0100h
	AddressBuffer DB 5 DUP(0)
	Found DB 0
	PrintBuffer DB 255 DUP(0)
	TemporaryOpcodeIndex DW 0
	ReadAlready DB 0
	PUSH_ES DB "06", 13, "PUSH ES", 13, 0, 13
	PUSH_DS DB "1E", 13, "PUSH DS", 13, 0, 13
	PUSH_SS DB "16", 13, "PUSH SS", 13, 0, 13
	PUSH_CS DB "0E", 13, "PUSH CS", 13, 0, 13
	PUSH_ES_COLON DB "26FF36", 13, "PUSH ES:", 13, 1, 13
	PUSH_SS_COLON DB "36FF36", 13, "PUSH SS:", 13, 1, 13
	PUSH_CS_COLON DB "2EFF36", 13, "PUSH CS:", 13, 1, 13
	PUSH_DS_COLON DB "FF36", 13, "PUSH DS:", 13, 1, 13
	PUSH_REG DB "50558BECC74602", 13, "PUSH ", 13, 1, 13
	PUSH_AX DB "50", 13, "PUSH AX", 13, 0, 13
	PUSH_CX DB "51", 13, "PUSH CX", 13, 0, 13
	PUSH_DX DB "52", 13, "PUSH DX", 13, 0, 13
	PUSH_BX DB "53", 13, "PUSH BX", 13, 0, 13
	PUSH_SP DB "54", 13, "PUSH SP", 13, 0, 13
	PUSH_BP DB "55", 13, "PUSH BP", 13, 0, 13
	PUSH_SI DB "56", 13, "PUSH SI", 13, 0, 13
	PUSH_DI DB "57", 13, "PUSH DI", 13, 0, 13
	PUSH_SI_COLON DB "FF35", 13, "PUSH [SI] ", 13, 1, 13
	PUSH_DI_COLON DB "FF37", 13, "PUSH [DI] ", 13, 1, 13
	PUSH_BX_COLON DB "FF34", 13, "PUSH [BX] ", 13, 1, 13
	MOV_AX_AX DB "8BC0", 13, "MOV AX, AX", 13, 0, 13
	MOV_AX_BX DB "8BC3", 13, "MOV AX, BX", 13, 0, 13
	MOV_AX_CX DB "8BC1", 13, "MOV AX, CX", 13, 0, 13
	MOV_AX_DX DB "8BC2", 13, "MOV AX, DX", 13, 0, 13
	MOV_AX_SP DB "8BC4", 13, "MOV AX, SP", 13, 0, 13
	MOV_AX_BP DB "8BC5", 13, "MOV AX, BP", 13, 0, 13
	MOV_AX_SI DB "8BC6", 13, "MOV AX, SI", 13, 0, 13
	MOV_AX_DI DB "8BC7", 13, "MOV AX, DI", 13, 0, 13
	MOV_AX_SI_COLON DB "8B04", 13, "MOV AX, [SI]", 13, 0, 13
	MOV_AX_DI_COLON DB "8B05", 13, "MOV AX, [DI]", 13, 0, 13
	MOV_AX_BX_COLON DB "8B07", 13, "MOV AX, [BX]", 13, 0, 13
	MOV_AX_OFFSET DB "B8", 13, "MOV AX, ", 13, 1, 13
	MOV_BX_AX DB "8BD8", 13, "MOV BX, AX", 13, 0, 13
	MOV_BX_BX DB "8BDB", 13, "MOV BX, BX", 13, 0, 13
	MOV_BX_CX DB "8BD9", 13, "MOV BX, CX", 13, 0, 13
	MOV_BX_DX DB "8BDA", 13, "MOV BX, DX", 13, 0, 13
	MOV_BX_SP DB "8BDC", 13, "MOV BX, SP", 13, 0, 13
	MOV_BX_BP DB "8BDD", 13, "MOV BX, BP", 13, 0, 13
	MOV_BX_SI DB "8BDE", 13, "MOV BX, SI", 13, 0, 13
	MOV_BX_DI DB "8BDF", 13, "MOV BX, DI", 13, 0, 13
	MOV_BX_SI_COLON DB "8B1C", 13, "MOV BX, [SI]", 13, 0, 13
	MOV_BX_DI_COLON DB "8B1D", 13, "MOV BX, [DI]", 13, 0, 13
	MOV_BX_BX_COLON DB "8B1F", 13, "MOV BX, [BX]", 13, 0, 13
	MOV_BX_OFFSET DB "BB", 13, "MOV BX, ", 13, 1, 13
	MOV_CX_AX DB "8BC8", 13, "MOV CX, AX", 13, 0, 13
	MOV_CX_BX DB "8BCB", 13, "MOV CX, BX", 13, 0, 13
	MOV_CX_CX DB "8BC9", 13, "MOV CX, CX", 13, 0, 13
	MOV_CX_DX DB "8BCA", 13, "MOV CX, DX", 13, 0, 13
	MOV_CX_SP DB "8BCC", 13, "MOV CX, SP", 13, 0, 13
	MOV_CX_BP DB "8BCD", 13, "MOV CX, BP", 13, 0, 13
	MOV_CX_SI DB "8BCE", 13, "MOV CX, SI", 13, 0, 13
	MOV_CX_DI DB "8BCF", 13, "MOV CX, DI", 13, 0, 13
	MOV_CX_SI_COLON DB "8B0C", 13, "MOV CX, [SI]", 13, 0, 13
	MOV_CX_DI_COLON DB "8B0D", 13, "MOV CX, [DI]", 13, 0, 13
	MOV_CX_BX_COLON DB "8B0F", 13, "MOV CX, [BX]", 13, 0, 13
	MOV_CX_OFFSET DB "B9", 13, "MOV CX, ", 13, 1, 13
	MOV_DX_AX DB "8BD0", 13, "MOV DX, AX", 13, 0, 13
	MOV_DX_BX DB "8BD3", 13, "MOV DX, BX", 13, 0, 13
	MOV_DX_CX DB "8BD1", 13, "MOV DX, CX", 13, 0, 13
	MOV_DX_DX DB "8BD2", 13, "MOV DX, DX", 13, 0, 13
	MOV_DX_SP DB "8BD4", 13, "MOV DX, SP", 13, 0, 13
	MOV_DX_BP DB "8BD5", 13, "MOV DX, BP", 13, 0, 13
	MOV_DX_SI DB "8BD6", 13, "MOV DX, SI", 13, 0, 13
	MOV_DX_DI DB "8BD7", 13, "MOV DX, DI", 13, 0, 13
	MOV_DX_SI_COLON DB "8B14", 13, "MOV DX, [SI]", 13, 0, 13
	MOV_DX_DI_COLON DB "8B15", 13, "MOV DX, [DI]", 13, 0, 13
	MOV_DX_BX_COLON DB "8B17", 13, "MOV DX, [BX]", 13, 0, 13
	MOV_DX_OFFSET DB "BA", 13, "MOV DX, ", 13, 1, 13
	MOV_SP_AX DB "8BE0", 13, "MOV SP, AX", 13, 0, 13
	MOV_SP_BX DB "8BE3", 13, "MOV SP, BX", 13, 0, 13
	MOV_SP_CX DB "8BE1", 13, "MOV SP, CX", 13, 0, 13
	MOV_SP_DX DB "8BE2", 13, "MOV SP, DX", 13, 0, 13
	MOV_SP_SP DB "8BE4", 13, "MOV SP, SP", 13, 0, 13
	MOV_SP_BP DB "8BE5", 13, "MOV SP, BP", 13, 0, 13
	MOV_SP_SI DB "8BE6", 13, "MOV SP, SI", 13, 0, 13
	MOV_SP_DI DB "8BE7", 13, "MOV SP, DI", 13, 0, 13
	MOV_SP_SI_COLON DB "8B24", 13, "MOV SP, [SI]", 13, 0, 13
	MOV_SP_DI_COLON DB "8B25", 13, "MOV SP, [DI]", 13, 0, 13
	MOV_SP_BX_COLON DB "8B27", 13, "MOV SP, [BX]", 13, 0, 13
	MOV_SP_OFFSET DB "BC", 13, "MOV SP, ", 13, 1, 13
	MOV_BP_AX DB "8BE8", 13, "MOV BP, AX", 13, 0, 13
	MOV_BP_BX DB "8BEB", 13, "MOV BP, BX", 13, 0, 13
	MOV_BP_CX DB "8BE9", 13, "MOV BP, CX", 13, 0, 13
	MOV_BP_DX DB "8BEA", 13, "MOV BP, DX", 13, 0, 13
	MOV_BP_SP DB "8BEC", 13, "MOV BP, SP", 13, 0, 13
	MOV_BP_BP DB "8BED", 13, "MOV BP, BP", 13, 0, 13
	MOV_BP_SI DB "8BEE", 13, "MOV BP, SI", 13, 0, 13
	MOV_BP_DI DB "8BEF", 13, "MOV BP, DI", 13, 0, 13
	MOV_BP_SI_COLON DB "8B2C", 13, "MOV BP, [SI]", 13, 0, 13
	MOV_BP_DI_COLON DB "8B2D", 13, "MOV BP, [DI]", 13, 0, 13
	MOV_BP_BX_COLON DB "8B2F", 13, "MOV BP, [BX]", 13, 0, 13
	MOV_BP_OFFSET DB "BD", 13, "MOV BP, ", 13, 1, 13
	MOV_SI_AX DB "8BF0", 13, "MOV SI, AX", 13, 0, 13
	MOV_SI_BX DB "8BF3", 13, "MOV SI, BX", 13, 0, 13
	MOV_SI_CX DB "8BF1", 13, "MOV SI, CX", 13, 0, 13
	MOV_SI_DX DB "8BF2", 13, "MOV SI, DX", 13, 0, 13
	MOV_SI_SP DB "8BF4", 13, "MOV SI, SP", 13, 0, 13
	MOV_SI_BP DB "8BF5", 13, "MOV SI, BP", 13, 0, 13
	MOV_SI_SI DB "8BF6", 13, "MOV SI, SI", 13, 0, 13
	MOV_SI_DI DB "8BF7", 13, "MOV SI, DI", 13, 0, 13
	MOV_SI_SI_COLON DB "8B34", 13, "MOV SI, [SI]", 13, 0, 13
	MOV_SI_DI_COLON DB "8B35", 13, "MOV SI, [DI]", 13, 0, 13
	MOV_SI_BX_COLON DB "8B37", 13, "MOV SI, [BX]", 13, 0, 13
	MOV_SI_OFFSET DB "BE", 13, "MOV SI, ", 13, 1, 13
	MOV_DI_AX DB "8BF8", 13, "MOV DI, AX", 13, 0, 13
	MOV_DI_BX DB "8BFB", 13, "MOV DI, BX", 13, 0, 13
	MOV_DI_CX DB "8BF9", 13, "MOV DI, CX", 13, 0, 13
	MOV_DI_DX DB "8BFA", 13, "MOV DI, DX", 13, 0, 13
	MOV_DI_SP DB "8BFC", 13, "MOV DI, SP", 13, 0, 13
	MOV_DI_BP DB "8BFD", 13, "MOV DI, BP", 13, 0, 13
	MOV_DI_SI DB "8BFE", 13, "MOV DI, SI", 13, 0, 13
	MOV_DI_DI DB "8BFF", 13, "MOV DI, DI", 13, 0, 13
	MOV_DI_SI_COLON DB "8B3C", 13, "MOV DI, [SI]", 13, 0, 13
	MOV_DI_DI_COLON DB "8B3D", 13, "MOV DI, [DI]", 13, 0, 13
	MOV_DI_BX_COLON DB "8B3F", 13, "MOV DI, [BX]", 13, 0, 13
	MOV_DI_OFFSET DB "BF", 13, "MOV DI, ", 13, 1, 13
	MOV_SI_COLON_AX DB "8904", 13, "MOV [SI], AX", 13, 0, 13
	MOV_SI_COLON_BX DB "891C", 13, "MOV [SI], BX", 13, 0, 13
	MOV_SI_COLON_CX DB "890C", 13, "MOV [SI], CX", 13, 0, 13
	MOV_SI_COLON_DX DB "8914", 13, "MOV [SI], DX", 13, 0, 13
	MOV_SI_COLON_SP DB "8924", 13, "MOV [SI], SP", 13, 0, 13
	MOV_SI_COLON_BP DB "892C", 13, "MOV [SI], BP", 13, 0, 13
	MOV_SI_COLON_SI DB "8934", 13, "MOV [SI], SI", 13, 0, 13
	MOV_SI_COLON_DI DB "893C", 13, "MOV [SI], DI", 13, 0, 13
	MOV_SI_COLON_AH DB "8824", 13, "MOV [SI], AH", 13, 0, 13
	MOV_SI_COLON_AL DB "8804", 13, "MOV [SI], AL", 13, 0, 13
	MOV_SI_COLON_BH DB "883C", 13, "MOV [SI], BH", 13, 0, 13
	MOV_SI_COLON_BL DB "881C", 13, "MOV [SI], BL", 13, 0, 13
	MOV_SI_COLON_CH DB "882C", 13, "MOV [SI], CH", 13, 0, 13
	MOV_SI_COLON_CL DB "880C", 13, "MOV [SI], CL", 13, 0, 13
	MOV_SI_COLON_DH DB "8834", 13, "MOV [SI], DH", 13, 0, 13
	MOV_SI_COLON_DL DB "8814", 13, "MOV [SI], DL", 13, 0, 13
	MOV_SI_COLON_OFFSET DB "C704", 13, "MOV [SI], ", 13, 1, 13
	MOV_DI_COLON_AX DB "8905", 13, "MOV [DI], AX", 13, 0, 13
	MOV_DI_COLON_BX DB "891D", 13, "MOV [DI], BX", 13, 0, 13
	MOV_DI_COLON_CX DB "890D", 13, "MOV [DI], CX", 13, 0, 13
	MOV_DI_COLON_DX DB "8915", 13, "MOV [DI], DX", 13, 0, 13
	MOV_DI_COLON_SP DB "8925", 13, "MOV [DI], SP", 13, 0, 13
	MOV_DI_COLON_BP DB "892D", 13, "MOV [DI], BP", 13, 0, 13
	MOV_DI_COLON_SI DB "8935", 13, "MOV [DI], SI", 13, 0, 13
	MOV_DI_COLON_DI DB "893D", 13, "MOV [DI], DI", 13, 0, 13
	MOV_DI_COLON_AH DB "8825", 13, "MOV [DI], AH", 13, 0, 13
	MOV_DI_COLON_AL DB "8805", 13, "MOV [DI], AL", 13, 0, 13
	MOV_DI_COLON_BH DB "883D", 13, "MOV [DI], BH", 13, 0, 13
	MOV_DI_COLON_BL DB "881D", 13, "MOV [DI], BL", 13, 0, 13
	MOV_DI_COLON_CH DB "882D", 13, "MOV [DI], CH", 13, 0, 13
	MOV_DI_COLON_CL DB "880D", 13, "MOV [DI], CL", 13, 0, 13
	MOV_DI_COLON_DH DB "8835", 13, "MOV [DI], DH", 13, 0, 13
	MOV_DI_COLON_DL DB "8815", 13, "MOV [DI], DL", 13, 0, 13
	MOV_DI_COLON_OFFSET DB "C705", 13, "MOV [DI], ", 13, 1, 13
	MOV_BX_COLON_AX DB "8907", 13, "MOV [BX], AX", 13, 0, 13
	MOV_BX_COLON_BX DB "891F", 13, "MOV [BX], BX", 13, 0, 13
	MOV_BX_COLON_CX DB "890F", 13, "MOV [BX], CX", 13, 0, 13
	MOV_BX_COLON_DX DB "8917", 13, "MOV [BX], DX", 13, 0, 13
	MOV_BX_COLON_SP DB "8927", 13, "MOV [BX], SP", 13, 0, 13
	MOV_BX_COLON_BP DB "892F", 13, "MOV [BX], BP", 13, 0, 13
	MOV_BX_COLON_SI DB "8937", 13, "MOV [BX], SI", 13, 0, 13
	MOV_BX_COLON_DI DB "893F", 13, "MOV [BX], DI", 13, 0, 13
	MOV_BX_COLON_AH DB "8827", 13, "MOV [BX], AH", 13, 0, 13
	MOV_BX_COLON_AL DB "8807", 13, "MOV [BX], AL", 13, 0, 13
	MOV_BX_COLON_BH DB "883F", 13, "MOV [BX], BH", 13, 0, 13
	MOV_BX_COLON_BL DB "881F", 13, "MOV [BX], BL", 13, 0, 13
	MOV_BX_COLON_CH DB "882F", 13, "MOV [BX], CH", 13, 0, 13
	MOV_BX_COLON_CL DB "880F", 13, "MOV [BX], CL", 13, 0, 13
	MOV_BX_COLON_DH DB "8837", 13, "MOV [BX], DH", 13, 0, 13
	MOV_BX_COLON_DL DB "8817", 13, "MOV [BX], DL", 13, 0, 13
	MOV_BX_COLON_OFFSET DB "C707", 13, "MOV [BX], ", 13, 1, 13
	POP_ES DB "07", 13, "POP ES", 13, 0, 13
	POP_DS DB "1F", 13, "POP DS", 13, 0, 13
	POP_SS DB "17", 13, "POP SS", 13, 0, 13
	POP_ES_COLON DB "268F06", 13, "POP ES:", 13, 1, 13
	POP_SS_COLON DB "368F06", 13, "POP SS:", 13, 1, 13
	POP_CS_COLON DB "2E8F06", 13, "POP CS:", 13, 1, 13
	POP_DS_COLON DB "8F06", 13, "POP DS:", 13, 1, 13
	POP_AX DB "58", 13, "POP AX", 13, 0, 13
	POP_CX DB "59", 13, "POP CX", 13, 0, 13
	POP_DX DB "5A", 13, "POP DX", 13, 0, 13
	POP_BX DB "5B", 13, "POP BX", 13, 0, 13
	POP_SP DB "5C", 13, "POP SP", 13, 0, 13
	POP_BP DB "5D", 13, "POP BP", 13, 0, 13
	POP_SI DB "5E", 13, "POP SI", 13, 0, 13
	POP_DI DB "5F", 13, "POP DI", 13, 0, 13
	POP_SI_COLON DB "8F04", 13, "POP [SI] ", 13, 0, 13
	POP_DI_COLON DB "8F05", 13, "POP [DI] ", 13, 0, 13
	POP_BX_COLON DB "8F07", 13, "POP [BX] ", 13, 0, 13
	MOV_AH_AH DB "8AE4", 13, "MOV AH, AH", 13, 0, 13
	MOV_AH_AL DB "8AE0", 13, "MOV AH, AL", 13, 0, 13
	MOV_AH_BH DB "8AE7", 13, "MOV AH, BH", 13, 0, 13
	MOV_AH_BL DB "8AE3", 13, "MOV AH, BL", 13, 0, 13
	MOV_AH_CH DB "8AE5", 13, "MOV AH, CH", 13, 0, 13
	MOV_AH_CL DB "8AE1", 13, "MOV AH, CL", 13, 0, 13
	MOV_AH_DL DB "8AE2", 13, "MOV AH, DL", 13, 0, 13
	MOV_AH_DH DB "8AE6", 13, "MOV AH, DH", 13, 0, 13
	MOV_AH_SI_COLON DB "8A24", 13, "MOV AH, [SI]", 13, 0, 13
	MOV_AH_DI_COLON DB "8A25", 13, "MOV AH, [DI]", 13, 0, 13
	MOV_AH_BX_COLON DB "8A27", 13, "MOV AH, [BX]", 13, 0, 13
	MOV_AH_OFFSET DB "B4", 13, "MOV AH, ", 13, 2, 13
	MOV_AL_AH DB "8AC4", 13, "MOV AL, AH", 13, 0, 13
	MOV_AL_AL DB "8AC0", 13, "MOV AL, AL", 13, 0, 13
	MOV_AL_BH DB "8AC7", 13, "MOV AL, BH", 13, 0, 13
	MOV_AL_BL DB "8AC3", 13, "MOV AL, BL", 13, 0, 13
	MOV_AL_CH DB "8AC5", 13, "MOV AL, CH", 13, 0, 13
	MOV_AL_CL DB "8AC1", 13, "MOV AL, CL", 13, 0, 13
	MOV_AL_DL DB "8AC2", 13, "MOV AL, DL", 13, 0, 13
	MOV_AL_DH DB "8AC6", 13, "MOV AL, DH", 13, 0, 13
	MOV_AL_SI_COLON DB "8A04", 13, "MOV AL, [SI]", 13, 0, 13
	MOV_AL_DI_COLON DB "8A05", 13, "MOV AL, [DI]", 13, 0, 13
	MOV_AL_BX_COLON DB "8A07", 13, "MOV AL, [BX]", 13, 0, 13
	MOV_AL_OFFSET DB "B0", 13, "MOV AL, ", 13, 2, 13
	MOV_BH_AH DB "8AFC", 13, "MOV BH, AH", 13, 0, 13
	MOV_BH_AL DB "8AF8", 13, "MOV BH, AL", 13, 0, 13
	MOV_BH_BH DB "8AFF", 13, "MOV BH, BH", 13, 0, 13
	MOV_BH_BL DB "8AFB", 13, "MOV BH, BL", 13, 0, 13
	MOV_BH_CH DB "8AFD", 13, "MOV BH, CH", 13, 0, 13
	MOV_BH_CL DB "8AF9", 13, "MOV BH, CL", 13, 0, 13
	MOV_BH_DL DB "8AFA", 13, "MOV BH, DL", 13, 0, 13
	MOV_BH_DH DB "8AFE", 13, "MOV BH, DH", 13, 0, 13
	MOV_BH_SI_COLON DB "8A3C", 13, "MOV BH, [SI]", 13, 0, 13
	MOV_BH_DI_COLON DB "8A3D", 13, "MOV BH, [DI]", 13, 0, 13
	MOV_BH_BX_COLON DB "8A3F", 13, "MOV BH, [BX]", 13, 0, 13
	MOV_BH_OFFSET DB "B7", 13, "MOV BH,", 13, 2, 13
	MOV_BL_AH DB "8ADC", 13, "MOV BL, AH", 13, 0, 13
	MOV_BL_AL DB "8AD8", 13, "MOV BL, AL", 13, 0, 13
	MOV_BL_BH DB "8ADF", 13, "MOV BL, BH", 13, 0, 13
	MOV_BL_BL DB "8ADB", 13, "MOV BL, BL", 13, 0, 13
	MOV_BL_CH DB "8ADD", 13, "MOV BL, CH", 13, 0, 13
	MOV_BL_CL DB "8AD9", 13, "MOV BL, CL", 13, 0, 13
	MOV_BL_DL DB "8ADA", 13, "MOV BL, DL", 13, 0, 13
	MOV_BL_DH DB "8ADE", 13, "MOV BL, DH", 13, 0, 13
	MOV_BL_SI_COLON DB "8A1C", 13, "MOV BL, [SI]", 13, 0, 13
	MOV_BL_DI_COLON DB "8A1D", 13, "MOV BL, [DI]", 13, 0, 13
	MOV_BL_BX_COLON DB "8A1F", 13, "MOV BL, [BX]", 13, 0, 13
	MOV_BL_OFFSET DB "B3", 13, "MOV BL, " , 13, 2, 13
	MOV_CH_AH DB "8AEC", 13, "MOV CH, AH", 13, 0, 13
	MOV_CH_AL DB "8AE8", 13, "MOV CH, AL", 13, 0, 13
	MOV_CH_BH DB "8AEF", 13, "MOV CH, BH", 13, 0, 13
	MOV_CH_BL DB "8AEB", 13, "MOV CH, BL", 13, 0, 13
	MOV_CH_CH DB "8AED", 13, "MOV CH, CH", 13, 0, 13
	MOV_CH_CL DB "8AE9", 13, "MOV CH, CL", 13, 0, 13
	MOV_CH_DL DB "8AEA", 13, "MOV CH, DL", 13, 0, 13
	MOV_CH_DH DB "8AEE", 13, "MOV CH, DH", 13, 0, 13
	MOV_CH_SI_COLON DB "8A2C", 13, "MOV CH, [SI]", 13, 0, 13
	MOV_CH_DI_COLON DB "8A2D", 13, "MOV CH, [DI]", 13, 0, 13
	MOV_CH_BX_COLON DB "8A2F", 13, "MOV CH, [BX]", 13, 0, 13
	MOV_CH_OFFSET DB "B5", 13, "MOV CH, ", 13, 2, 13
	MOV_CL_AH DB "8ACC", 13, "MOV CL, AH", 13, 0, 13
	MOV_CL_AL DB "8AC8", 13, "MOV CL, AL", 13, 0, 13
	MOV_CL_BH DB "8ACF", 13, "MOV CL, BH", 13, 0, 13
	MOV_CL_BL DB "8ACB", 13, "MOV CL, BL", 13, 0, 13
	MOV_CL_CH DB "8ACD", 13, "MOV CL, CH", 13, 0, 13
	MOV_CL_CL DB "8AC9", 13, "MOV CL, CL", 13, 0, 13
	MOV_CL_DL DB "8ACA", 13, "MOV CL, DL", 13, 0, 13
	MOV_CL_DH DB "8ACE", 13, "MOV CL, DH", 13, 0, 13
	MOV_CL_SI_COLON DB "8A0C", 13, "MOV CL, [SI]", 13, 0, 13
	MOV_CL_DI_COLON DB "8A0D", 13, "MOV CL, [DI]", 13, 0, 13
	MOV_CL_BX_COLON DB "8A0F", 13, "MOV CL, [BX]", 13, 0, 13
	MOV_CL_OFFSET DB "B1", 13, "MOV CL, ", 13, 2, 13
	MOV_DL_AH DB "8AD4", 13, "MOV DL, AH", 13, 0, 13
	MOV_DL_AL DB "8AD0", 13, "MOV DL, AL", 13, 0, 13
	MOV_DL_BH DB "8AD7", 13, "MOV DL, BH", 13, 0, 13
	MOV_DL_BL DB "8AD3", 13, "MOV DL, BL", 13, 0, 13
	MOV_DL_CH DB "8AD5", 13, "MOV DL, CH", 13, 0, 13
	MOV_DL_CL DB "8AD1", 13, "MOV DL, CL", 13, 0, 13
	MOV_DL_DL DB "8AD2", 13, "MOV DL, DL", 13, 0, 13
	MOV_DL_DH DB "8AD6", 13, "MOV DL, DH", 13, 0, 13
	MOV_DL_SI_COLON DB "8A14", 13, "MOV DL, [SI]", 13, 0, 13
	MOV_DL_DI_COLON DB "8A15", 13, "MOV DL, [DI]", 13, 0, 13
	MOV_DL_BX_COLON DB "8A17", 13, "MOV DL, [BX]", 13, 0, 13
	MOV_DL_OFFSET DB "B2", 13, "MOV DL, ", 13, 2, 13
	MOV_DH_AH DB "8AF4", 13, "MOV DH, AH", 13, 0, 13
	MOV_DH_AL DB "8AF0", 13, "MOV DH, AL", 13, 0, 13
	MOV_DH_BH DB "8AF7", 13, "MOV DH, BH", 13, 0, 13
	MOV_DH_BL DB "8AF3	", 13, "MOV DH, BL", 13, 0, 13
	MOV_DH_CH DB "8AF5", 13, "MOV DH, CH", 13, 0, 13
	MOV_DH_CL DB "8AF1", 13, "MOV DH, CL", 13, 0, 13
	MOV_DH_DL DB "8AF2", 13, "MOV DH, DL", 13, 0, 13
	MOV_DH_DH DB "8AF6", 13, "MOV DH, DH", 13, 0, 13
	MOV_DH_SI_COLON DB "8A34", 13, "MOV DH, [SI]", 13, 0, 13
	MOV_DH_DI_COLON DB "8A35", 13, "MOV DH, [DI]", 13, 0, 13
	MOV_DH_BX_COLON DB "8A37", 13, "MOV DH, [BX]", 13, 0, 13
	MOV_DH_OFFSET DB "B6", 13, "MOV DH, ", 13, 2, 13
	ADD_AX_AX DB "03C0", 13, "ADD AX, AX", 13, 0, 13
	ADD_AX_BX DB "03C3", 13, "ADD AX, BX", 13, 0, 13
	ADD_AX_CX DB "03C1", 13, "ADD AX, CX", 13, 0, 13
	ADD_AX_DX DB "03C2", 13, "ADD AX, DX", 13, 0, 13
	ADD_AX_SI DB "03C6", 13, "ADD AX, SI", 13, 0, 13
	ADD_AX_DI DB "03C7", 13, "ADD AX, DI", 13, 0, 13
	ADD_AX_BP DB "03C5", 13, "ADD AX, BP", 13, 0, 13
	ADD_AX_SP DB "03C4", 13, "ADD AX, SP", 13, 0, 13
	ADD_AX_SI_COLON DB "0304", 13, "ADD AX, WORD PTR [SI]", 13, 0, 13
	ADD_AX_DI_COLON DB "0305", 13, "ADD AX, WORD PTR [DI]", 13, 0, 13
	ADD_AX_BX_COLON DB "0307", 13, "ADD AX, WORD PTR [BX]", 13, 0, 13
	ADD_AX_OFFSET DB "05", 13, "ADD AX, ", 13, 1, 13
	ADD_BX_AX DB "03D8", 13, "ADD BX, AX", 13, 0, 13
	ADD_BX_BX DB "03DB", 13, "ADD BX, BX", 13, 0, 13
	ADD_BX_CX DB "03D9", 13, "ADD BX, CX", 13, 0, 13
	ADD_BX_DX DB "03DA", 13, "ADD BX, DX", 13, 0, 13
	ADD_BX_SI DB "03DE", 13, "ADD BX, SI", 13, 0, 13
	ADD_BX_DI DB "03DF", 13, "ADD BX, DI", 13, 0, 13
	ADD_BX_BP DB "03DD", 13, "ADD BX, BP", 13, 0, 13
	ADD_BX_SP DB "03DC", 13, "ADD BX, SP", 13, 0, 13
	ADD_BX_SI_COLON DB "031C", 13, "ADD BX, WORD PTR [SI]", 13, 0, 13
	ADD_BX_DI_COLON DB "031D", 13, "ADD BX, WORD PTR [DI]", 13, 0, 13
	ADD_BX_BX_COLON DB "031F", 13, "ADD BX, WORD PTR [BX]", 13, 0, 13
	ADD_BX_OFFSET DB "81C3", 13, "ADD BX, ", 13, 1, 13
	ADD_CX_AX DB "03C8", 13, "ADD CX, AX", 13, 0, 13
	ADD_CX_BX DB "03CB", 13, "ADD CX, BX", 13, 0, 13
	ADD_CX_CX DB "03C9", 13, "ADD CX, CX", 13, 0, 13
	ADD_CX_DX DB "03CA", 13, "ADD CX, DX", 13, 0, 13
	ADD_CX_SI DB "03CE", 13, "ADD CX, SI", 13, 0, 13
	ADD_CX_DI DB "03CF", 13, "ADD CX, DI", 13, 0, 13
	ADD_CX_BP DB "03CD", 13, "ADD CX, BP", 13, 0, 13
	ADD_CX_SP DB "03CC", 13, "ADD CX, SP", 13, 0, 13
	ADD_CX_SI_COLON DB "030C", 13, "ADD CX, WORD PTR [SI]", 13, 0, 13
	ADD_CX_DI_COLON DB "030D", 13, "ADD CX, WORD PTR [DI]", 13, 0, 13
	ADD_CX_BX_COLON DB "030F", 13, "ADD CX, WORD PTR [BX]", 13, 0, 13
	ADD_CX_OFFSET DB "81C1", 13, "ADD CX, ", 13, 1, 13
	ADD_DX_AX DB "03D0", 13, "ADD DX, AX", 13, 0, 13
	ADD_DX_BX DB "03D3", 13, "ADD DX, BX", 13, 0, 13
	ADD_DX_CX DB "03D1", 13, "ADD DX, CX", 13, 0, 13
	ADD_DX_DX DB "03D2", 13, "ADD DX, DX", 13, 0, 13
	ADD_DX_SI DB "03D6", 13, "ADD DX, SI", 13, 0, 13
	ADD_DX_DI DB "03D7", 13, "ADD DX, DI", 13, 0, 13
	ADD_DX_BP DB "03D5", 13, "ADD DX, BP", 13, 0, 13
	ADD_DX_SP DB "03D4", 13, "ADD DX, SP", 13, 0, 13
	ADD_DX_SI_COLON DB "0314", 13, "ADD DX, WORD PTR [SI]", 13, 0, 13
	ADD_DX_DI_COLON DB "0315", 13, "ADD DX, WORD PTR [DI]", 13, 0, 13
	ADD_DX_BX_COLON DB "0317", 13, "ADD DX, WORD PTR [BX]", 13, 0, 13
	ADD_DX_OFFSET DB "81C2", 13, "ADD DX, ", 13, 1, 13
	ADD_SI_AX DB "03F0", 13, "ADD SI, AX", 13, 0, 13
	ADD_SI_BX DB "03F3", 13, "ADD SI, BX", 13, 0, 13
	ADD_SI_CX DB "03F1", 13, "ADD SI, CX", 13, 0, 13
	ADD_SI_DX DB "03F2", 13, "ADD SI, DX", 13, 0, 13
	ADD_SI_SI DB "03F6", 13, "ADD SI, SI", 13, 0, 13
	ADD_SI_DI DB "03F7", 13, "ADD SI, DI", 13, 0, 13
	ADD_SI_BP DB "03F5", 13, "ADD SI, BP", 13, 0, 13
	ADD_SI_SP DB "03F4", 13, "ADD SI, SP", 13, 0, 13
	ADD_SI_SI_COLON DB "0334", 13, "ADD SI, WORD PTR [SI]", 13, 0, 13
	ADD_SI_DI_COLON DB "0335", 13, "ADD SI, WORD PTR [DI]", 13, 0, 13
	ADD_SI_BX_COLON DB "0337", 13, "ADD SI, WORD PTR [BX]", 13, 0, 13
	ADD_SI_OFFSET DB "81C6", 13, "ADD SI, ", 13, 1, 13
	ADD_DI_AX DB "03F8", 13, "ADD DI, AX", 13, 0, 13
	ADD_DI_BX DB "03FB", 13, "ADD DI, BX", 13, 0, 13
	ADD_DI_CX DB "03F9", 13, "ADD DI, CX", 13, 0, 13
	ADD_DI_DX DB "03FA", 13, "ADD DI, DX", 13, 0, 13
	ADD_DI_SI DB "03FE", 13, "ADD DI, SI", 13, 0, 13
	ADD_DI_DI DB "03FF", 13, "ADD DI, DI", 13, 0, 13
	ADD_DI_BP DB "03FD", 13, "ADD DI, BP", 13, 0, 13
	ADD_DI_SP DB "03FC", 13, "ADD DI, SP", 13, 0, 13
	ADD_DI_SI_COLON DB "033C", 13, "ADD DI, WORD PTR [SI]", 13, 0, 13
	ADD_DI_DI_COLON DB "033D", 13, "ADD DI, WORD PTR [DI]", 13, 0, 13
	ADD_DI_BX_COLON DB "033F", 13, "ADD DI, WORD PTR [BX]", 13, 0, 13
	ADD_DI_OFFSET DB "81C7", 13, "ADD DI, ", 13, 1, 13
	ADD_BP_AX DB "03E8", 13, "ADD BP, AX", 13, 0, 13
	ADD_BP_BX DB "03EB", 13, "ADD BP, BX", 13, 0, 13
	ADD_BP_CX DB "03E9", 13, "ADD BP, CX", 13, 0, 13
	ADD_BP_DX DB "03EA", 13, "ADD BP, DX", 13, 0, 13
	ADD_BP_SI DB "03EE", 13, "ADD BP, SI", 13, 0, 13
	ADD_BP_DI DB "03EF", 13, "ADD BP, DI", 13, 0, 13
	ADD_BP_BP DB "03ED", 13, "ADD BP, BP", 13, 0, 13
	ADD_BP_SP DB "03EC", 13, "ADD BP, SP", 13, 0, 13
	ADD_BP_SI_COLON DB "032C", 13, "ADD BP, WORD PTR [SI]", 13, 0, 13
	ADD_BP_DI_COLON DB "032D", 13, "ADD BP, WORD PTR [DI]", 13, 0, 13
	ADD_BP_BX_COLON DB "032F", 13, "ADD BP, WORD PTR [BX]", 13, 0, 13
	ADD_BP_OFFSET DB "81C5", 13, "ADD BP, ", 13, 1, 13
	ADD_SP_AX DB "03E0", 13, "ADD SP, AX", 13, 0, 13
	ADD_SP_BX DB "03E3", 13, "ADD SP, BX", 13, 0, 13
	ADD_SP_CX DB "03E1", 13, "ADD SP, CX", 13, 0, 13
	ADD_SP_DX DB "03E2", 13, "ADD SP, DX", 13, 0, 13
	ADD_SP_SI DB "03E6", 13, "ADD SP, SI", 13, 0, 13
	ADD_SP_DI DB "03E7", 13, "ADD SP, DI", 13, 0, 13
	ADD_SP_BP DB "03E5", 13, "ADD SP, BP", 13, 0, 13
	ADD_SP_SP DB "03E4", 13, "ADD SP, SP", 13, 0, 13
	ADD_SP_SI_COLON DB "0324", 13, "ADD SP, WORD PTR [SI]", 13, 0, 13
	ADD_SP_DI_COLON DB "0325", 13, "ADD SP, WORD PTR [DI]", 13, 0, 13
	ADD_SP_BX_COLON DB "0327", 13, "ADD SP, WORD PTR [BX]", 13, 0, 13
	ADD_SP_OFFSET DB "81C4", 13, "ADD SP, ", 13, 1, 13
	ADD_SI_COLON_AX DB "0104", 13, "ADD WORD PTR [SI], AX", 13, 0, 13
	ADD_SI_COLON_BX DB "011C", 13, "ADD WORD PTR [SI], BX", 13, 0, 13
	ADD_SI_COLON_CX DB "010C", 13, "ADD WORD PTR [SI], CX", 13, 0, 13
	ADD_SI_COLON_DX DB "0114", 13, "ADD WORD PTR [SI], DX", 13, 0, 13
	ADD_SI_COLON_SI DB "0134", 13, "ADD WORD PTR [SI], SI", 13, 0, 13
	ADD_SI_COLON_DI DB "013C", 13, "ADD WORD PTR [SI], DI", 13, 0, 13
	ADD_SI_COLON_BP DB "012C", 13, "ADD WORD PTR [SI], BP", 13, 0, 13
	ADD_SI_COLON_SP DB "0124", 13, "ADD WORD PTR [SI], SP", 13, 0, 13
	ADD_SI_COLON_OFFSET DB "8104", 13, "ADD WORD PTR [SI], ", 13, 1, 13
	ADD_DI_COLON_AX DB "0105", 13, "ADD WORD PTR [DI], AX", 13, 0, 13
	ADD_DI_COLON_BX DB "011D", 13, "ADD WORD PTR [DI], BX", 13, 0, 13
	ADD_DI_COLON_CX DB "010D", 13, "ADD WORD PTR [DI], CX", 13, 0, 13
	ADD_DI_COLON_DX DB "0115", 13, "ADD WORD PTR [DI], DX", 13, 0, 13
	ADD_DI_COLON_SI DB "0135", 13, "ADD WORD PTR [DI], SI", 13, 0, 13
	ADD_DI_COLON_DI DB "013D", 13, "ADD WORD PTR [DI], DI", 13, 0, 13
	ADD_DI_COLON_BP DB "012D", 13, "ADD WORD PTR [DI], BP", 13, 0, 13
	ADD_DI_COLON_SP DB "0125", 13, "ADD WORD PTR [DI], SP", 13, 0, 13
	ADD_DI_COLON_OFFSET DB "8105", 13, "ADD WORD PTR [DI], ", 13, 1, 13
	ADD_BX_COLON_AX DB "0107", 13, "ADD WORD PTR [BX], AX", 13, 0, 13
	ADD_BX_COLON_BX DB "011F", 13, "ADD WORD PTR [BX], BX", 13, 0, 13
	ADD_BX_COLON_CX DB "010F", 13, "ADD WORD PTR [BX], CX", 13, 0, 13
	ADD_BX_COLON_DX DB "0117", 13, "ADD WORD PTR [BX], DX", 13, 0, 13
	ADD_BX_COLON_SI DB "0137", 13, "ADD WORD PTR [BX], SI", 13, 0, 13
	ADD_BX_COLON_DI DB "013F", 13, "ADD WORD PTR [BX], DI", 13, 0, 13
	ADD_BX_COLON_BP DB "012F", 13, "ADD WORD PTR [BX], BP", 13, 0, 13
	ADD_BX_COLON_SP DB "0127", 13, "ADD WORD PTR [BX], SP", 13, 0, 13
	ADD_BX_COLON_OFFSET DB "8107", 13, "ADD WORD PTR [BX], ", 13, 1, 13
	ADD_AH_AH DB "02E4", 13, "ADD AH, AH", 13, 0, 13
	ADD_AH_AL DB "02E0", 13, "ADD AH, AL", 13, 0, 13
	ADD_AH_BH DB "02E7", 13, "ADD AH, BH", 13, 0, 13
	ADD_AH_BL DB "02E3", 13, "ADD AH, BL", 13, 0, 13
	ADD_AH_CH DB "02E5", 13, "ADD AH, CH", 13, 0, 13
	ADD_AH_CL DB "02E1", 13, "ADD AH, CL", 13, 0, 13
	ADD_AH_DL DB "02E2", 13, "ADD AH, DL", 13, 0, 13
	ADD_AH_DH DB "02E6", 13, "ADD AH, DH", 13, 0, 13
	ADD_AH_SI_COLON DB "0224", 13, "ADD AH, BYTE PTR [SI]", 13, 0, 13
	ADD_AH_DI_COLON DB "0225", 13, "ADD AH, BYTE PTR [DI]", 13, 0, 13
	ADD_AH_BX_COLON DB "0227", 13, "ADD AH, BYTE PTR [BX]", 13, 0, 13
	ADD_AH_OFFSET DB "80C4", 13, "ADD AH, ", 13, 2, 13
	ADD_AL_AH DB "02C4", 13, "ADD AL, AH", 13, 0, 13
	ADD_AL_AL DB "02C0", 13, "ADD AL, AL", 13, 0, 13
	ADD_AL_BH DB "02C7", 13, "ADD AL, BH", 13, 0, 13
	ADD_AL_BL DB "02C3", 13, "ADD AL, BL", 13, 0, 13
	ADD_AL_CH DB "02C5", 13, "ADD AL, CH", 13, 0, 13
	ADD_AL_CL DB "02C1", 13, "ADD AL, CL", 13, 0, 13
	ADD_AL_DL DB "02C2", 13, "ADD AL, DL", 13, 0, 13
	ADD_AL_DH DB "02C6", 13, "ADD AL, DH", 13, 0, 13
	ADD_AL_SI_COLON DB "0204", 13, "ADD AL, BYTE PTR [SI]", 13, 0, 13
	ADD_AL_DI_COLON DB "0205", 13, "ADD AL, BYTE PTR [DI]", 13, 0, 13
	ADD_AL_BX_COLON DB "0207", 13, "ADD AL, BYTE PTR [BX]", 13, 0, 13
	ADD_AL_OFFSET DB "04", 13, "ADD AL, ", 13, 2, 13
	ADD_BH_AH DB "02FC", 13, "ADD BH, AH", 13, 0, 13
	ADD_BH_AL DB "02F8", 13, "ADD BH, AL", 13, 0, 13
	ADD_BH_BH DB "02FF", 13, "ADD BH, BH", 13, 0, 13
	ADD_BH_BL DB "02FB", 13, "ADD BH, BL", 13, 0, 13
	ADD_BH_CH DB "02FD", 13, "ADD BH, CH", 13, 0, 13
	ADD_BH_CL DB "02F9", 13, "ADD BH, CL", 13, 0, 13
	ADD_BH_DL DB "02FA", 13, "ADD BH, DL", 13, 0, 13
	ADD_BH_DH DB "02FE", 13, "ADD BH, DH", 13, 0, 13
	ADD_BH_SI_COLON DB "023C", 13, "ADD BH, BYTE PTR [SI]", 13, 0, 13
	ADD_BH_DI_COLON DB "023D", 13, "ADD BH, BYTE PTR [DI]", 13, 0, 13
	ADD_BH_BX_COLON DB "023F", 13, "ADD BH, BYTE PTR [BX]", 13, 0, 13
	ADD_BH_OFFSET DB "80C7", 13, "ADD BH, ", 13, 2, 13
	ADD_BL_AH DB "02DC", 13, "ADD BL, AH", 13, 0, 13
	ADD_BL_AL DB "02D8", 13, "ADD BL, AL", 13, 0, 13
	ADD_BL_BH DB "02DF", 13, "ADD BL, BH", 13, 0, 13
	ADD_BL_BL DB "02DB", 13, "ADD BL, BL", 13, 0, 13
	ADD_BL_CH DB "02DD", 13, "ADD BL, CH", 13, 0, 13
	ADD_BL_CL DB "02D9", 13, "ADD BL, CL", 13, 0, 13
	ADD_BL_DL DB "02DA", 13, "ADD BL, DL", 13, 0, 13
	ADD_BL_DH DB "02DE", 13, "ADD BL, DH", 13, 0, 13
	ADD_BL_SI_COLON DB "021C", 13, "ADD BL, BYTE PTR [SI]", 13, 0, 13
	ADD_BL_DI_COLON DB "021D", 13, "ADD BL, BYTE PTR [DI]", 13, 0, 13
	ADD_BL_BX_COLON DB "021F", 13, "ADD BL, BYTE PTR [BX]", 13, 0, 13
	ADD_BL_OFFSET DB "80C3", 13, "ADD BL, ", 13, 2, 13
	ADD_CH_AH DB "02EC", 13, "ADD CH, AH", 13, 0, 13
	ADD_CH_AL DB "02E8", 13, "ADD CH, AL", 13, 0, 13
	ADD_CH_BH DB "02EF", 13, "ADD CH, BH", 13, 0, 13
	ADD_CH_BL DB "02EB", 13, "ADD CH, BL", 13, 0, 13
	ADD_CH_CH DB "02ED", 13, "ADD CH, CH", 13, 0, 13
	ADD_CH_CL DB "02E9", 13, "ADD CH, CL", 13, 0, 13
	ADD_CH_DL DB "02EA", 13, "ADD CH, DL", 13, 0, 13
	ADD_CH_DH DB "02EE", 13, "ADD CH, DH", 13, 0, 13
	ADD_CH_SI_COLON DB "022C", 13, "ADD CH, BYTE PTR [SI]", 13, 0, 13
	ADD_CH_DI_COLON DB "022D", 13, "ADD CH, BYTE PTR [DI]", 13, 0, 13
	ADD_CH_BX_COLON DB "022F", 13, "ADD CH, BYTE PTR [BX]", 13, 0, 13
	ADD_CH_OFFSET DB "80C5", 13, "ADD CH, ", 13, 2, 13
	ADD_CL_AH DB "02CC", 13, "ADD CL, AH", 13, 0, 13
	ADD_CL_AL DB "02C8", 13, "ADD CL, AL", 13, 0, 13
	ADD_CL_BH DB "02CF", 13, "ADD CL, BH", 13, 0, 13
	ADD_CL_BL DB "02CB", 13, "ADD CL, BL", 13, 0, 13
	ADD_CL_CH DB "02CD", 13, "ADD CL, CH", 13, 0, 13
	ADD_CL_CL DB "02C9", 13, "ADD CL, CL", 13, 0, 13
	ADD_CL_DL DB "02CA", 13, "ADD CL, DL", 13, 0, 13
	ADD_CL_DH DB "02CE", 13, "ADD CL, DH", 13, 0, 13
	ADD_CL_SI_COLON DB "020C", 13, "ADD CL, BYTE PTR [SI]", 13, 0, 13
	ADD_CL_DI_COLON DB "020D", 13, "ADD CL, BYTE PTR [DI]", 13, 0, 13
	ADD_CL_BX_COLON DB "020F", 13, "ADD CL, BYTE PTR [BX]", 13, 0, 13
	ADD_CL_OFFSET DB "80C1", 13, "ADD CL, ", 13, 2, 13
	ADD_DL_AH DB "02D4", 13, "ADD DL, AH", 13, 0, 13
	ADD_DL_AL DB "02D0", 13, "ADD DL, AL", 13, 0, 13
	ADD_DL_BH DB "02D7", 13, "ADD DL, BH", 13, 0, 13
	ADD_DL_BL DB "02D3", 13, "ADD DL, BL", 13, 0, 13
	ADD_DL_CH DB "02D5", 13, "ADD DL, CH", 13, 0, 13
	ADD_DL_CL DB "02D1", 13, "ADD DL, CL", 13, 0, 13
	ADD_DL_DL DB "02D2", 13, "ADD DL, DL", 13, 0, 13
	ADD_DL_DH DB "02D6", 13, "ADD DL, DH", 13, 0, 13
	ADD_DL_SI_COLON DB "0214", 13, "ADD DL, BYTE PTR [SI]", 13, 0, 13
	ADD_DL_DI_COLON DB "0215", 13, "ADD DL, BYTE PTR [DI]", 13, 0, 13
	ADD_DL_BX_COLON DB "0217", 13, "ADD DL, BYTE PTR [BX]", 13, 0, 13
	ADD_DL_OFFSET DB "80C2", 13, "ADD DL, ", 13, 2, 13
	ADD_DH_AH DB "02F4", 13, "ADD DH, AH", 13, 0, 13
	ADD_DH_AL DB "02F0", 13, "ADD DH, AL", 13, 0, 13
	ADD_DH_BH DB "02F7", 13, "ADD DH, BH", 13, 0, 13
	ADD_DH_BL DB "02F3", 13, "ADD DH, BL", 13, 0, 13
	ADD_DH_CH DB "02F5", 13, "ADD DH, CH", 13, 0, 13
	ADD_DH_CL DB "02F1", 13, "ADD DH, CL", 13, 0, 13
	ADD_DH_DL DB "02F2", 13, "ADD DH, DL", 13, 0, 13
	ADD_DH_DH DB "02F6", 13, "ADD DH, DH", 13, 0, 13
	ADD_DH_SI_COLON DB "0234", 13, "ADD DH, BYTE PTR [SI]", 13, 0, 13
	ADD_DH_DI_COLON DB "0235", 13, "ADD DH, BYTE PTR [DI]", 13, 0, 13
	ADD_DH_BX_COLON DB "0237", 13, "ADD DH, BYTE PTR [BX]", 13, 0, 13
	ADD_DH_OFFSET DB "80C6", 13, "ADD DH, ", 13, 2, 13
	ADD_SI_COLON_AH DB "0024", 13, "ADD BYTE PTR [SI], AH", 13, 0, 13
	ADD_SI_COLON_AL DB "0004", 13, "ADD BYTE PTR [SI], AL", 13, 0, 13
	ADD_SI_COLON_BH DB "003C", 13, "ADD BYTE PTR [SI], BH", 13, 0, 13
	ADD_SI_COLON_BL DB "001C", 13, "ADD BYTE PTR [SI], BL", 13, 0, 13
	ADD_SI_COLON_CH DB "002C", 13, "ADD BYTE PTR [SI], CH", 13, 0, 13
	ADD_SI_COLON_CL DB "000C", 13, "ADD BYTE PTR [SI], CL", 13, 0, 13
	ADD_SI_COLON_DL DB "0014", 13, "ADD BYTE PTR [SI], DL", 13, 0, 13
	ADD_SI_COLON_DH DB "0034", 13, "ADD BYTE PTR [SI], DH", 13, 0, 13
	ADD_DI_COLON_AH DB "0025", 13, "ADD BYTE PTR [DI], AH", 13, 0, 13
	ADD_DI_COLON_AL DB "0005", 13, "ADD BYTE PTR [DI], AL", 13, 0, 13
	ADD_DI_COLON_BH DB "003D", 13, "ADD BYTE PTR [DI], BH", 13, 0, 13
	ADD_DI_COLON_BL DB "001D", 13, "ADD BYTE PTR [DI], BL", 13, 0, 13
	ADD_DI_COLON_CH DB "002D", 13, "ADD BYTE PTR [DI], CH", 13, 0, 13
	ADD_DI_COLON_CL DB "000D", 13, "ADD BYTE PTR [DI], CL", 13, 0, 13
	ADD_DI_COLON_DL DB "0015", 13, "ADD BYTE PTR [DI], DL", 13, 0, 13
	ADD_DI_COLON_DH DB "0035", 13, "ADD BYTE PTR [DI], DH", 13, 0, 13
	ADD_BX_COLON_AH DB "0027", 13, "ADD BYTE PTR [BX], AH", 13, 0, 13
	ADD_BX_COLON_AL DB "0007", 13, "ADD BYTE PTR [BX], AL", 13, 0, 13
	ADD_BX_COLON_BH DB "003F", 13, "ADD BYTE PTR [BX], BH", 13, 0, 13
	ADD_BX_COLON_BL DB "001F", 13, "ADD BYTE PTR [BX], BL", 13, 0, 13
	ADD_BX_COLON_CH DB "002F", 13, "ADD BYTE PTR [BX], CH", 13, 0, 13
	ADD_BX_COLON_CL DB "000F", 13, "ADD BYTE PTR [BX], CL", 13, 0, 13
	ADD_BX_COLON_DL DB "0017", 13, "ADD BYTE PTR [BX], DL", 13, 0, 13
	ADD_BX_COLON_DH DB "0037", 13, "ADD BYTE PTR [BX], DH", 13, 0, 13
	SUB_AH_AH DB "2AE4", 13, "SUB AH, AH", 13, 0, 13
	SUB_AH_AL DB "2AE0", 13, "SUB AH, AL", 13, 0, 13
	SUB_AH_BH DB "2AE7", 13, "SUB AH, BH", 13, 0, 13
	SUB_AH_BL DB "2AE3", 13, "SUB AH, BL", 13, 0, 13
	SUB_AH_CH DB "2AE5", 13, "SUB AH, CH", 13, 0, 13
	SUB_AH_CL DB "2AE1", 13, "SUB AH, CL", 13, 0, 13
	SUB_AH_DL DB "2AE2", 13, "SUB AH, DL", 13, 0, 13
	SUB_AH_DH DB "2AE6", 13, "SUB AH, DH", 13, 0, 13
	SUB_AH_SI_COLON DB "2A24", 13, "SUB AH, BYTE PTR [SI]", 13, 0, 13
	SUB_AH_DI_COLON DB "2A25", 13, "SUB AH, BYTE PTR [DI]", 13, 0, 13
	SUB_AH_BX_COLON DB "2A27", 13, "SUB AH, BYTE PTR [BX]", 13, 0, 13
	SUB_AH_OFFSET DB "80EC", 13, "SUB AH, ", 13, 2, 13
	SUB_AL_AH DB "2AC4", 13, "SUB AL, AH", 13, 0, 13
	SUB_AL_AL DB "2AC0", 13, "SUB AL, AL", 13, 0, 13
	SUB_AL_BH DB "2AC7", 13, "SUB AL, BH", 13, 0, 13
	SUB_AL_BL DB "2AC3", 13, "SUB AL, BL", 13, 0, 13
	SUB_AL_CH DB "2AC5", 13, "SUB AL, CH", 13, 0, 13
	SUB_AL_CL DB "2AC1", 13, "SUB AL, CL", 13, 0, 13
	SUB_AL_DL DB "2AC2", 13, "SUB AL, DL", 13, 0, 13
	SUB_AL_DH DB "2AC6", 13, "SUB AL, DH", 13, 0, 13
	SUB_AL_SI_COLON DB "2A04", 13, "SUB AL, BYTE PTR [SI]", 13, 0, 13
	SUB_AL_DI_COLON DB "2A05", 13, "SUB AL, BYTE PTR [DI]", 13, 0, 13
	SUB_AL_BX_COLON DB "2A07", 13, "SUB AL, BYTE PTR [BX]", 13, 0, 13
	SUB_AL_OFFSET DB "2C", 13, "SUB AL, ", 13, 2, 13
	SUB_BH_AH DB "2AFC", 13, "SUB BH, AH", 13, 0, 13
	SUB_BH_AL DB "2AF8", 13, "SUB BH, AL", 13, 0, 13
	SUB_BH_BH DB "2AFF", 13, "SUB BH, BH", 13, 0, 13
	SUB_BH_BL DB "2AFB", 13, "SUB BH, BL", 13, 0, 13
	SUB_BH_CH DB "2AFD", 13, "SUB BH, CH", 13, 0, 13
	SUB_BH_CL DB "2AF9", 13, "SUB BH, CL", 13, 0, 13
	SUB_BH_DL DB "2AFA", 13, "SUB BH, DL", 13, 0, 13
	SUB_BH_DH DB "2AFE", 13, "SUB BH, DH", 13, 0, 13
	SUB_BH_SI_COLON DB "2A3C", 13, "SUB BH, BYTE PTR [SI]", 13, 0, 13
	SUB_BH_DI_COLON DB "2A3D", 13, "SUB BH, BYTE PTR [DI]", 13, 0, 13
	SUB_BH_BX_COLON DB "2A3F", 13, "SUB BH, BYTE PTR [BX]", 13, 0, 13
	SUB_BH_OFFSET DB "80EF", 13, "SUB BH, ", 13, 2, 13
	SUB_BL_AH DB "2ADC", 13, "SUB BL, AH", 13, 0, 13
	SUB_BL_AL DB "2AD8", 13, "SUB BL, AL", 13, 0, 13
	SUB_BL_BH DB "2ADF", 13, "SUB BL, BH", 13, 0, 13
	SUB_BL_BL DB "2ADB", 13, "SUB BL, BL", 13, 0, 13
	SUB_BL_CH DB "2ADD", 13, "SUB BL, CH", 13, 0, 13
	SUB_BL_CL DB "2AD9", 13, "SUB BL, CL", 13, 0, 13
	SUB_BL_DL DB "2ADA", 13, "SUB BL, DL", 13, 0, 13
	SUB_BL_DH DB "2ADE", 13, "SUB BL, DH", 13, 0, 13
	SUB_BL_SI_COLON DB "2A1C", 13, "SUB BL, BYTE PTR [SI]", 13, 0, 13
	SUB_BL_DI_COLON DB "2A1D", 13, "SUB BL, BYTE PTR [DI]", 13, 0, 13
	SUB_BL_BX_COLON DB "2A1F", 13, "SUB BL, BYTE PTR [BX]", 13, 0, 13
	SUB_BL_OFFSET DB "80EB", 13, "SUB BL, ", 13, 2, 13
	SUB_CH_AH DB "2AEC", 13, "SUB CH, AH", 13, 0, 13
	SUB_CH_AL DB "2AE8", 13, "SUB CH, AL", 13, 0, 13
	SUB_CH_BH DB "2AEF", 13, "SUB CH, BH", 13, 0, 13
	SUB_CH_BL DB "2AEB", 13, "SUB CH, BL", 13, 0, 13
	SUB_CH_CH DB "2AED", 13, "SUB CH, CH", 13, 0, 13
	SUB_CH_CL DB "2AE9", 13, "SUB CH, CL", 13, 0, 13
	SUB_CH_DL DB "2AEA", 13, "SUB CH, DL", 13, 0, 13
	SUB_CH_DH DB "2AEE", 13, "SUB CH, DH", 13, 0, 13
	SUB_CH_SI_COLON DB "2A2C", 13, "SUB CH, BYTE PTR [SI]", 13, 0, 13
	SUB_CH_DI_COLON DB "2A2D", 13, "SUB CH, BYTE PTR [DI]", 13, 0, 13
	SUB_CH_BX_COLON DB "2A2F", 13, "SUB CH, BYTE PTR [BX]", 13, 0, 13
	SUB_CH_OFFSET DB "80ED", 13, "SUB CH, ", 13, 2, 13
	SUB_CL_AH DB "2ACC", 13, "SUB CL, AH", 13, 0, 13
	SUB_CL_AL DB "2AC8", 13, "SUB CL, AL", 13, 0, 13
	SUB_CL_BH DB "2ACF", 13, "SUB CL, BH", 13, 0, 13
	SUB_CL_BL DB "2ACB", 13, "SUB CL, BL", 13, 0, 13
	SUB_CL_CH DB "2ACD", 13, "SUB CL, CH", 13, 0, 13
	SUB_CL_CL DB "2AC9", 13, "SUB CL, CL", 13, 0, 13
	SUB_CL_DL DB "2ACA", 13, "SUB CL, DL", 13, 0, 13
	SUB_CL_DH DB "2ACE", 13, "SUB CL, DH", 13, 0, 13
	SUB_CL_SI_COLON DB "2A0C", 13, "SUB CL, BYTE PTR [SI]", 13, 0, 13
	SUB_CL_DI_COLON DB "2A0D", 13, "SUB CL, BYTE PTR [DI]", 13, 0, 13
	SUB_CL_BX_COLON DB "2A0F", 13, "SUB CL, BYTE PTR [BX]", 13, 0, 13
	SUB_CL_OFFSET DB "80E9", 13, "SUB CL, ", 13, 2, 13
	SUB_DL_AH DB "2AD4", 13, "SUB DL, AH", 13, 0, 13
	SUB_DL_AL DB "2AD0", 13, "SUB DL, AL", 13, 0, 13
	SUB_DL_BH DB "2AD7", 13, "SUB DL, BH", 13, 0, 13
	SUB_DL_BL DB "2AD3", 13, "SUB DL, BL", 13, 0, 13
	SUB_DL_CH DB "2AD5", 13, "SUB DL, CH", 13, 0, 13
	SUB_DL_CL DB "2AD1", 13, "SUB DL, CL", 13, 0, 13
	SUB_DL_DL DB "2AD2", 13, "SUB DL, DL", 13, 0, 13
	SUB_DL_DH DB "2AD6", 13, "SUB DL, DH", 13, 0, 13
	SUB_DL_SI_COLON DB "2A14", 13, "SUB DL, BYTE PTR [SI]", 13, 0, 13
	SUB_DL_DI_COLON DB "2A15", 13, "SUB DL, BYTE PTR [DI]", 13, 0, 13
	SUB_DL_BX_COLON DB "2A17", 13, "SUB DL, BYTE PTR [BX]", 13, 0, 13
	SUB_DL_OFFSET DB "80EA", 13, "SUB DL, ", 13, 2, 13
	SUB_DH_AH DB "2AF4", 13, "SUB DH, AH", 13, 0, 13
	SUB_DH_AL DB "2AF0", 13, "SUB DH, AL", 13, 0, 13
	SUB_DH_BH DB "2AF7", 13, "SUB DH, BH", 13, 0, 13
	SUB_DH_BL DB "2AF3", 13, "SUB DH, BL", 13, 0, 13
	SUB_DH_CH DB "2AF5", 13, "SUB DH, CH", 13, 0, 13
	SUB_DH_CL DB "2AF1", 13, "SUB DH, CL", 13, 0, 13
	SUB_DH_DL DB "2AF2", 13, "SUB DH, DL", 13, 0, 13
	SUB_DH_DH DB "2AF6", 13, "SUB DH, DH", 13, 0, 13
	SUB_DH_SI_COLON DB "2A34", 13, "SUB DH, BYTE PTR [SI]", 13, 0, 13
	SUB_DH_DI_COLON DB "2A35", 13, "SUB DH, BYTE PTR [DI]", 13, 0, 13
	SUB_DH_BX_COLON DB "2A37", 13, "SUB DH, BYTE PTR [BX]", 13, 0, 13
	SUB_DH_OFFSET DB "80EE", 13, "SUB DH, ", 13, 2, 13
	SUB_SI_COLON_AH DB "2824", 13, "SUB BYTE PTR [SI], AH", 13, 0, 13
	SUB_SI_COLON_AL DB "2804", 13, "SUB BYTE PTR [SI], AL", 13, 0, 13
	SUB_SI_COLON_BH DB "283C", 13, "SUB BYTE PTR [SI], BH", 13, 0, 13
	SUB_SI_COLON_BL DB "281C", 13, "SUB BYTE PTR [SI], BL", 13, 0, 13
	SUB_SI_COLON_CH DB "282C", 13, "SUB BYTE PTR [SI], CH", 13, 0, 13
	SUB_SI_COLON_CL DB "280C", 13, "SUB BYTE PTR [SI], CL", 13, 0, 13
	SUB_SI_COLON_DL DB "2814", 13, "SUB BYTE PTR [SI], DL", 13, 0, 13
	SUB_SI_COLON_DH DB "2834", 13, "SUB BYTE PTR [SI], DH", 13, 0, 13
	SUB_SI_COLON_OFFSET DB "802C", 13, "SUB BYTE PTR [SI], ", 13, 2, 13
	SUB_DI_COLON_AH DB "2825", 13, "SUB BYTE PTR [DI], AH", 13, 0, 13
	SUB_DI_COLON_AL DB "2805", 13, "SUB BYTE PTR [DI], AL", 13, 0, 13
	SUB_DI_COLON_BH DB "283D", 13, "SUB BYTE PTR [DI], BH", 13, 0, 13
	SUB_DI_COLON_BL DB "281D", 13, "SUB BYTE PTR [DI], BL", 13, 0, 13
	SUB_DI_COLON_CH DB "282D", 13, "SUB BYTE PTR [DI], CH", 13, 0, 13
	SUB_DI_COLON_CL DB "280D", 13, "SUB BYTE PTR [DI], CL", 13, 0, 13
	SUB_DI_COLON_DL DB "2815", 13, "SUB BYTE PTR [DI], DL", 13, 0, 13
	SUB_DI_COLON_DH DB "2835", 13, "SUB BYTE PTR [DI], DH", 13, 0, 13
	SUB_DI_COLON_OFFSET DB "802D", 13, "SUB BYTE PTR [DI], ", 13, 2, 13
	SUB_BX_COLON_AH DB "2827", 13, "SUB BYTE PTR [BX], AH", 13, 0, 13
	SUB_BX_COLON_AL DB "2807", 13, "SUB BYTE PTR [BX], AL", 13, 0, 13
	SUB_BX_COLON_BH DB "283F", 13, "SUB BYTE PTR [BX], BH", 13, 0, 13
	SUB_BX_COLON_BL DB "281F", 13, "SUB BYTE PTR [BX], BL", 13, 0, 13
	SUB_BX_COLON_CH DB "282F", 13, "SUB BYTE PTR [BX], CH", 13, 0, 13
	SUB_BX_COLON_CL DB "280F", 13, "SUB BYTE PTR [BX], CL", 13, 0, 13
	SUB_BX_COLON_DL DB "2817", 13, "SUB BYTE PTR [BX], DL", 13, 0, 13
	SUB_BX_COLON_DH DB "2837", 13, "SUB BYTE PTR [BX], DH", 13, 0, 13
	SUB_BX_COLON_OFFSET DB "802F", 13, "SUB BYTE PTR [BX], ", 13, 2, 13
	SUB_AX_AX DB "2BC0", 13, "SUB AX, AX", 13, 0, 13
	SUB_AX_BX DB "2BC3", 13, "SUB AX, BX", 13, 0, 13
	SUB_AX_CX DB "2BC1", 13, "SUB AX, CX", 13, 0, 13
	SUB_AX_DX DB "2BC2", 13, "SUB AX, DX", 13, 0, 13
	SUB_AX_SI DB "2BC6", 13, "SUB AX, SI", 13, 0, 13
	SUB_AX_DI DB "2BC7", 13, "SUB AX, DI", 13, 0, 13
	SUB_AX_BP DB "2BC5", 13, "SUB AX, BP", 13, 0, 13
	SUB_AX_SP DB "2BC4", 13, "SUB AX, SP", 13, 0, 13
	SUB_AX_SI_COLON DB "2B04", 13, "SUB AX, WORD PTR [SI]", 13, 0, 13
	SUB_AX_DI_COLON DB "2B05", 13, "SUB AX, WORD PTR [DI]", 13, 0, 13
	SUB_AX_BX_COLON DB "2B07", 13, "SUB AX, WORD PTR [BX]", 13, 0, 13
	SUB_AX_OFFSET DB "2D", 13, "SUB AX, ", 13, 1, 13
	SUB_BX_AX DB "2BD8", 13, "SUB BX, AX", 13, 0, 13
	SUB_BX_BX DB "2BDB", 13, "SUB BX, BX", 13, 0, 13
	SUB_BX_CX DB "2BD9", 13, "SUB BX, CX", 13, 0, 13
	SUB_BX_DX DB "2BDA", 13, "SUB BX, DX", 13, 0, 13
	SUB_BX_SI DB "2BDE", 13, "SUB BX, SI", 13, 0, 13
	SUB_BX_DI DB "2BDF", 13, "SUB BX, DI", 13, 0, 13
	SUB_BX_BP DB "2BDD", 13, "SUB BX, BP", 13, 0, 13
	SUB_BX_SP DB "2BDC", 13, "SUB BX, SP", 13, 0, 13
	SUB_BX_SI_COLON DB "2B1C", 13, "SUB BX, WORD PTR [SI]", 13, 0, 13
	SUB_BX_DI_COLON DB "2B1D", 13, "SUB BX, WORD PTR [DI]", 13, 0, 13
	SUB_BX_BX_COLON DB "2B1F", 13, "SUB BX, WORD PTR [BX]", 13, 0, 13
	SUB_BX_OFFSET DB "81EB", 13, "SUB BX, ", 13, 1, 13
	SUB_CX_AX DB "2BC8", 13, "SUB CX, AX", 13, 0, 13
	SUB_CX_BX DB "2BCB", 13, "SUB CX, BX", 13, 0, 13
	SUB_CX_CX DB "2BC9", 13, "SUB CX, CX", 13, 0, 13
	SUB_CX_DX DB "2BCA", 13, "SUB CX, DX", 13, 0, 13
	SUB_CX_SI DB "2BCE", 13, "SUB CX, SI", 13, 0, 13
	SUB_CX_DI DB "2BCF", 13, "SUB CX, DI", 13, 0, 13
	SUB_CX_BP DB "2BCD", 13, "SUB CX, BP", 13, 0, 13
	SUB_CX_SP DB "2BCC", 13, "SUB CX, SP", 13, 0, 13
	SUB_CX_SI_COLON DB "2B0C", 13, "SUB CX, WORD PTR [SI]", 13, 0, 13
	SUB_CX_DI_COLON DB "2B0D", 13, "SUB CX, WORD PTR [DI]", 13, 0, 13
	SUB_CX_BX_COLON DB "2B0F", 13, "SUB CX, WORD PTR [BX]", 13, 0, 13
	SUB_CX_OFFSET DB "81E9", 13, "SUB CX, ", 13, 1, 13
	SUB_DX_AX DB "2BD0", 13, "SUB DX, AX", 13, 0, 13
	SUB_DX_BX DB "2BD3", 13, "SUB DX, BX", 13, 0, 13
	SUB_DX_CX DB "2BD1", 13, "SUB DX, CX", 13, 0, 13
	SUB_DX_DX DB "2BD2", 13, "SUB DX, DX", 13, 0, 13
	SUB_DX_SI DB "2BD6", 13, "SUB DX, SI", 13, 0, 13
	SUB_DX_DI DB "2BD7", 13, "SUB DX, DI", 13, 0, 13
	SUB_DX_BP DB "2BD5", 13, "SUB DX, BP", 13, 0, 13
	SUB_DX_SP DB "2BD4", 13, "SUB DX, SP", 13, 0, 13
	SUB_DX_SI_COLON DB "2B14", 13, "SUB DX, WORD PTR [SI]", 13, 0, 13
	SUB_DX_DI_COLON DB "2B15", 13, "SUB DX, WORD PTR [DI]", 13, 0, 13
	SUB_DX_BX_COLON DB "2B17", 13, "SUB DX, WORD PTR [BX]", 13, 0, 13
	SUB_DX_OFFSET DB "81EA", 13, "SUB DX, ", 13, 1, 13
	SUB_SI_AX DB "2BF0", 13, "SUB SI, AX", 13, 0, 13
	SUB_SI_BX DB "2BF3", 13, "SUB SI, BX", 13, 0, 13
	SUB_SI_CX DB "2BF1", 13, "SUB SI, CX", 13, 0, 13
	SUB_SI_DX DB "2BF2", 13, "SUB SI, DX", 13, 0, 13
	SUB_SI_SI DB "2BF6", 13, "SUB SI, SI", 13, 0, 13
	SUB_SI_DI DB "2BF7", 13, "SUB SI, DI", 13, 0, 13
	SUB_SI_BP DB "2BF5", 13, "SUB SI, BP", 13, 0, 13
	SUB_SI_SP DB "2BF4", 13, "SUB SI, SP", 13, 0, 13
	SUB_SI_SI_COLON DB "2B34", 13, "SUB SI, WORD PTR [SI]", 13, 0, 13
	SUB_SI_DI_COLON DB "2B35", 13, "SUB SI, WORD PTR [DI]", 13, 0, 13
	SUB_SI_BX_COLON DB "2B37", 13, "SUB SI, WORD PTR [BX]", 13, 0, 13
	SUB_SI_OFFSET DB "81EE", 13, "SUB SI, ", 13, 1, 13
	SUB_DI_AX DB "2BF8", 13, "SUB DI, AX", 13, 0, 13
	SUB_DI_BX DB "2BFB", 13, "SUB DI, BX", 13, 0, 13
	SUB_DI_CX DB "2BF9", 13, "SUB DI, CX", 13, 0, 13
	SUB_DI_DX DB "2BFA", 13, "SUB DI, DX", 13, 0, 13
	SUB_DI_SI DB "2BFE", 13, "SUB DI, SI", 13, 0, 13
	SUB_DI_DI DB "2BFF", 13, "SUB DI, DI", 13, 0, 13
	SUB_DI_BP DB "2BFD", 13, "SUB DI, BP", 13, 0, 13
	SUB_DI_SP DB "2BFC", 13, "SUB DI, SP", 13, 0, 13
	SUB_DI_SI_COLON DB "2B3C", 13, "SUB DI, WORD PTR [SI]", 13, 0, 13
	SUB_DI_DI_COLON DB "2B3D", 13, "SUB DI, WORD PTR [DI]", 13, 0, 13
	SUB_DI_BX_COLON DB "2B3F", 13, "SUB DI, WORD PTR [BX]", 13, 0, 13
	SUB_DI_OFFSET DB "81EF", 13, "SUB DI, ", 13, 1, 13
	SUB_BP_AX DB "2BF8", 13, "SUB BP, AX", 13, 0, 13
	SUB_BP_BX DB "2BFB", 13, "SUB BP, BX", 13, 0, 13
	SUB_BP_CX DB "2BF9", 13, "SUB BP, CX", 13, 0, 13
	SUB_BP_DX DB "2BFA", 13, "SUB BP, DX", 13, 0, 13
	SUB_BP_SI DB "2BFE", 13, "SUB BP, SI", 13, 0, 13
	SUB_BP_DI DB "2BFF", 13, "SUB BP, DI", 13, 0, 13
	SUB_BP_BP DB "2BFD", 13, "SUB BP, BP", 13, 0, 13
	SUB_BP_SP DB "2BFC", 13, "SUB BP, SP", 13, 0, 13
	SUB_BP_SI_COLON DB "2B3C", 13, "SUB BP, WORD PTR [SI]", 13, 0, 13
	SUB_BP_DI_COLON DB "2B3D", 13, "SUB BP, WORD PTR [DI]", 13, 0, 13
	SUB_BP_BX_COLON DB "2B3F", 13, "SUB BP, WORD PTR [BX]", 13, 0, 13
	SUB_BP_OFFSET DB "81ED", 13, "SUB BP, ", 13, 1, 13
	SUB_SP_AX DB "2BE0", 13, "SUB SP, AX", 13, 0, 13
	SUB_SP_BX DB "2BE3", 13, "SUB SP, BX", 13, 0, 13
	SUB_SP_CX DB "2BE1", 13, "SUB SP, CX", 13, 0, 13
	SUB_SP_DX DB "2BE2", 13, "SUB SP, DX", 13, 0, 13
	SUB_SP_SI DB "2BE6", 13, "SUB SP, SI", 13, 0, 13
	SUB_SP_DI DB "2BE7", 13, "SUB SP, DI", 13, 0, 13
	SUB_SP_BP DB "2BE5", 13, "SUB SP, BP", 13, 0, 13
	SUB_SP_SP DB "2BE4", 13, "SUB SP, SP", 13, 0, 13
	SUB_SP_SI_COLON DB "2B24", 13, "SUB SP, WORD PTR [SI]", 13, 0, 13
	SUB_SP_DI_COLON DB "2B25", 13, "SUB SP, WORD PTR [DI]", 13, 0, 13
	SUB_SP_BX_COLON DB "2B27", 13, "SUB SP, WORD PTR [BX]", 13, 0, 13
	SUB_SP_OFFSET DB "81EC", 13, "SUB SP, ", 13, 1, 13
	SUB_SI_COLON_AX DB "2904", 13, "SUB WORD PTR [SI], AX", 13, 0, 13
	SUB_SI_COLON_BX DB "291C", 13, "SUB WORD PTR [SI], BX", 13, 0, 13
	SUB_SI_COLON_CX DB "290C", 13, "SUB WORD PTR [SI], CX", 13, 0, 13
	SUB_SI_COLON_DX DB "2914", 13, "SUB WORD PTR [SI], DX", 13, 0, 13
	SUB_SI_COLON_SI DB "2934", 13, "SUB WORD PTR [SI], SI", 13, 0, 13
	SUB_SI_COLON_DI DB "293C", 13, "SUB WORD PTR [SI], DI", 13, 0, 13
	SUB_SI_COLON_BP DB "292C", 13, "SUB WORD PTR [SI], BP", 13, 0, 13
	SUB_SI_COLON_SP DB "2924", 13, "SUB WORD PTR [SI], SP", 13, 0, 13
	SUB_SI_COLONW_OFFSET DB "812C", 13, "SUB WORD PTR [SI], ", 13, 1, 13
	SUB_DI_COLON_AX DB "2905", 13, "SUB WORD PTR [DI], AX", 13, 0, 13
	SUB_DI_COLON_BX DB "291D", 13, "SUB WORD PTR [DI], BX", 13, 0, 13
	SUB_DI_COLON_CX DB "290D", 13, "SUB WORD PTR [DI], CX", 13, 0, 13
	SUB_DI_COLON_DX DB "2915", 13, "SUB WORD PTR [DI], DX", 13, 0, 13
	SUB_DI_COLON_SI DB "2935", 13, "SUB WORD PTR [DI], SI", 13, 0, 13
	SUB_DI_COLON_DI DB "293D", 13, "SUB WORD PTR [DI], DI", 13, 0, 13
	SUB_DI_COLON_BP DB "292D", 13, "SUB WORD PTR [DI], BP", 13, 0, 13
	SUB_DI_COLON_SP DB "2925", 13, "SUB WORD PTR [DI], SP", 13, 0, 13
	SUB_DI_COLONW_OFFSET DB "812D", 13, "SUB WORD PTR [DI],  ", 13, 1, 13
	SUB_BX_COLON_AX DB "2907", 13, "SUB WORD PTR [BX], AX", 13, 0, 13
	SUB_BX_COLON_BX DB "291F", 13, "SUB WORD PTR [BX], BX", 13, 0, 13
	SUB_BX_COLON_CX DB "290F", 13, "SUB WORD PTR [BX], CX", 13, 0, 13
	SUB_BX_COLON_DX DB "2917", 13, "SUB WORD PTR [BX], DX", 13, 0, 13
	SUB_BX_COLON_SI DB "2937", 13, "SUB WORD PTR [BX], SI", 13, 0, 13
	SUB_BX_COLON_DI DB "293F", 13, "SUB WORD PTR [BX], DI", 13, 0, 13
	SUB_BX_COLON_BP DB "292F", 13, "SUB WORD PTR [BX], BP", 13, 0, 13
	SUB_BX_COLON_SP DB "2927", 13, "SUB WORD PTR [BX], SP", 13, 0, 13
	SUB_BX_COLONW_OFFSET DB "812F", 13, "SUB WORD PTR [BX], ", 13, 1, 13
	CMP_AX_AX DB "3BC0", 13, "CMP AX, AX", 13, 0, 13
	CMP_AX_BX DB "3BC3", 13, "CMP AX, BX", 13, 0, 13
	CMP_AX_CX DB "3BC1", 13, "CMP AX, CX", 13, 0, 13
	CMP_AX_DX DB "3BC2", 13, "CMP AX, DX", 13, 0, 13
	CMP_AX_SI DB "3BC6", 13, "CMP AX, SI", 13, 0, 13
	CMP_AX_DI DB "3BC7", 13, "CMP AX, DI", 13, 0, 13
	CMP_AX_BP DB "3BC5", 13, "CMP AX, BP", 13, 0, 13
	CMP_AX_SP DB "3BC4", 13, "CMP AX, SP", 13, 0, 13
	CMP_AX_SI_COLON DB "3B04", 13, "CMP AX, WORD PTR [SI]", 13, 0, 13
	CMP_AX_DI_COLON DB "3B05", 13, "CMP AX, WORD PTR [DI]", 13, 0, 13
	CMP_AX_BX_COLON DB "3B07", 13, "CMP AX, WORD PTR [BX]", 13, 0, 13
	CMP_AX_OFFSET DB "3D", 13, "CMP AX, ", 13, 1, 13
	CMP_BX_AX DB "3BD8", 13, "CMP BX, AX", 13, 0, 13
	CMP_BX_BX DB "3BDB", 13, "CMP BX, BX", 13, 0, 13
	CMP_BX_CX DB "3BD9", 13, "CMP BX, CX", 13, 0, 13
	CMP_BX_DX DB "3BDA", 13, "CMP BX, DX", 13, 0, 13
	CMP_BX_SI DB "3BDE", 13, "CMP BX, SI", 13, 0, 13
	CMP_BX_DI DB "3BDF", 13, "CMP BX, DI", 13, 0, 13
	CMP_BX_BP DB "3BDD", 13, "CMP BX, BP", 13, 0, 13
	CMP_BX_SP DB "3BDC", 13, "CMP BX, SP", 13, 0, 13
	CMP_BX_SI_COLON DB "3B1C", 13, "CMP BX, WORD PTR [SI]", 13, 0, 13
	CMP_BX_DI_COLON DB "3B1D", 13, "CMP BX, WORD PTR [DI]", 13, 0, 13
	CMP_BX_BX_COLON DB "3B1F", 13, "CMP BX, WORD PTR [BX]", 13, 0, 13
	CMP_BX_OFFSET DB "81FB", 13, "CMP BX, ", 13, 1, 13
	CMP_BX_OFFSETB DB "81FB", 13, "CMP BX, ", 13, 2, 13
	CMP_CX_AX DB "3BC8", 13, "CMP CX, AX", 13, 0, 13
	CMP_CX_BX DB "3BCB", 13, "CMP CX, BX", 13, 0, 13
	CMP_CX_CX DB "3BC9", 13, "CMP CX, CX", 13, 0, 13
	CMP_CX_DX DB "3BCA", 13, "CMP CX, DX", 13, 0, 13
	CMP_CX_SI DB "3BCE", 13, "CMP CX, SI", 13, 0, 13
	CMP_CX_DI DB "3BCF", 13, "CMP CX, DI", 13, 0, 13
	CMP_CX_BP DB "3BCD", 13, "CMP CX, BP", 13, 0, 13
	CMP_CX_SP DB "3BCC", 13, "CMP CX, SP", 13, 0, 13
	CMP_CX_SI_COLON DB "3B0C", 13, "CMP CX, WORD PTR [SI]", 13, 0, 13
	CMP_CX_DI_COLON DB "3B0D", 13, "CMP CX, WORD PTR [DI]", 13, 0, 13
	CMP_CX_BX_COLON DB "3B0F", 13, "CMP CX, WORD PTR [BX]", 13, 0, 13
	CMP_CX_OFFSET DB "81F9", 13, "CMP CX, ", 13, 1, 13
	CMP_CX_OFFSETB DB "83F9", 13, "CMP CX, ", 13, 2, 13
	CMP_DX_AX DB "3BD0", 13, "CMP DX, AX", 13, 0, 13
	CMP_DX_BX DB "3BD3", 13, "CMP DX, BX", 13, 0, 13
	CMP_DX_CX DB "3BD1", 13, "CMP DX, CX", 13, 0, 13
	CMP_DX_DX DB "3BD2", 13, "CMP DX, DX", 13, 0, 13
	CMP_DX_SI DB "3BD6", 13, "CMP DX, SI", 13, 0, 13
	CMP_DX_DI DB "3BD7", 13, "CMP DX, DI", 13, 0, 13
	CMP_DX_BP DB "3BD5", 13, "CMP DX, BP", 13, 0, 13
	CMP_DX_SP DB "3BD4", 13, "CMP DX, SP", 13, 0, 13
	CMP_DX_SI_COLON DB "3B14", 13, "CMP DX, WORD PTR [SI]", 13, 0, 13
	CMP_DX_DI_COLON DB "3B15", 13, "CMP DX, WORD PTR [DI]", 13, 0, 13
	CMP_DX_BX_COLON DB "3B17", 13, "CMP DX, WORD PTR [BX]", 13, 0, 13
	CMP_DX_OFFSET DB "81FA", 13, "CMP DX, ", 13, 1, 13
	CMP_DX_OFFSETB DB "83FA", 13, "CMP DX, ", 13, 2, 13
	CMP_SI_AX DB "3BF0", 13, "CMP SI, AX", 13, 0, 13
	CMP_SI_BX DB "3BF3", 13, "CMP SI, BX", 13, 0, 13
	CMP_SI_CX DB "3BF1", 13, "CMP SI, CX", 13, 0, 13
	CMP_SI_DX DB "3BF2", 13, "CMP SI, DX", 13, 0, 13
	CMP_SI_SI DB "3BF6", 13, "CMP SI, SI", 13, 0, 13
	CMP_SI_DI DB "3BF7", 13, "CMP SI, DI", 13, 0, 13
	CMP_SI_BP DB "3BF5", 13, "CMP SI, BP", 13, 0, 13
	CMP_SI_SP DB "3BF4", 13, "CMP SI, SP", 13, 0, 13
	CMP_SI_SI_COLON DB "3B34", 13, "CMP SI, WORD PTR [SI]", 13, 0, 13
	CMP_SI_DI_COLON DB "3B35", 13, "CMP SI, WORD PTR [DI]", 13, 0, 13
	CMP_SI_BX_COLON DB "3B37", 13, "CMP SI, WORD PTR [BX]", 13, 0, 13
	CMP_SI_OFFSET DB "81FE", 13, "CMP SI, ", 13, 1, 13
	CMP_SI_OFFSETB DB "83FE", 13, "CMP SI, ", 13, 2, 13
	CMP_DI_AX DB "3BF8", 13, "CMP DI, AX", 13, 0, 13
	CMP_DI_BX DB "3BFB", 13, "CMP DI, BX", 13, 0, 13
	CMP_DI_CX DB "3BF9", 13, "CMP DI, CX", 13, 0, 13
	CMP_DI_DX DB "3BFA", 13, "CMP DI, DX", 13, 0, 13
	CMP_DI_SI DB "3BFE", 13, "CMP DI, SI", 13, 0, 13
	CMP_DI_DI DB "3BFF", 13, "CMP DI, DI", 13, 0, 13
	CMP_DI_BP DB "3BFD", 13, "CMP DI, BP", 13, 0, 13
	CMP_DI_SP DB "3BFC", 13, "CMP DI, SP", 13, 0, 13
	CMP_DI_SI_COLON DB "3B3C", 13, "CMP DI, WORD PTR [SI]", 13, 0, 13
	CMP_DI_DI_COLON DB "3B3D", 13, "CMP DI, WORD PTR [DI]", 13, 0, 13
	CMP_DI_BX_COLON DB "3B3F", 13, "CMP DI, WORD PTR [BX]", 13, 0, 13
	CMP_DI_OFFSET DB "81FF", 13, "CMP DI, ", 13, 1, 13
	CMP_DI_OFFSETB DB "83FF", 13, "CMP DI, ", 13, 2, 13
	CMP_BP_AX DB "3BE8", 13, "CMP BP, AX", 13, 0, 13
	CMP_BP_BX DB "3BEB", 13, "CMP BP, BX", 13, 0, 13
	CMP_BP_CX DB "3BE9", 13, "CMP BP, CX", 13, 0, 13
	CMP_BP_DX DB "3BEA", 13, "CMP BP, DX", 13, 0, 13
	CMP_BP_SI DB "3BEE", 13, "CMP BP, SI", 13, 0, 13
	CMP_BP_DI DB "3BEF", 13, "CMP BP, DI", 13, 0, 13
	CMP_BP_BP DB "3BED", 13, "CMP BP, BP", 13, 0, 13
	CMP_BP_SP DB "3BEC", 13, "CMP BP, SP", 13, 0, 13
	CMP_BP_SI_COLON DB "3B2C", 13, "CMP BP, WORD PTR [SI]", 13, 0, 13
	CMP_BP_DI_COLON DB "3B2D", 13, "CMP BP, WORD PTR [DI]", 13, 0, 13
	CMP_BP_BX_COLON DB "3B2F", 13, "CMP BP, WORD PTR [BX]", 13, 0, 13
	CMP_BP_OFFSET DB "81FD", 13, "CMP BP, ", 13, 1, 13
	CMP_BP_OFFSETB DB "83FD", 13, "CMP BP, ", 13, 2, 13
	CMP_SP_AX DB "3BE0", 13, "CMP SP, AX", 13, 0, 13
	CMP_SP_BX DB "3BE3", 13, "CMP SP, BX", 13, 0, 13
	CMP_SP_CX DB "3BE1", 13, "CMP SP, CX", 13, 0, 13
	CMP_SP_DX DB "3BE2", 13, "CMP SP, DX", 13, 0, 13
	CMP_SP_SI DB "3BE6", 13, "CMP SP, SI", 13, 0, 13
	CMP_SP_DI DB "3BE7", 13, "CMP SP, DI", 13, 0, 13
	CMP_SP_BP DB "3BE5", 13, "CMP SP, BP", 13, 0, 13
	CMP_SP_SP DB "3BE4", 13, "CMP SP, SP", 13, 0, 13
	CMP_SP_SI_COLON DB "3B24", 13, "CMP SP, WORD PTR [SI]", 13, 0, 13
	CMP_SP_DI_COLON DB "3B25", 13, "CMP SP, WORD PTR [DI]", 13, 0, 13
	CMP_SP_BX_COLON DB "3B27", 13, "CMP SP, WORD PTR [BX]", 13, 0, 13
	CMP_SP_OFFSET DB "81FC", 13, "CMP SP, ", 13, 1, 13
	CMP_SP_OFFSETB DB "83FC", 13, "CMP SP, ", 13, 2, 13
	CMP_SI_COLON_AX DB "3904", 13, "CMP WORD PTR [SI], AX", 13, 0, 13
	CMP_SI_COLON_BX DB "391C", 13, "CMP WORD PTR [SI], BX", 13, 0, 13
	CMP_SI_COLON_CX DB "390C", 13, "CMP WORD PTR [SI], CX", 13, 0, 13
	CMP_SI_COLON_DX DB "3914", 13, "CMP WORD PTR [SI], DX", 13, 0, 13
	CMP_SI_COLON_SI DB "3934", 13, "CMP WORD PTR [SI], SI", 13, 0, 13
	CMP_SI_COLON_DI DB "393C", 13, "CMP WORD PTR [SI], DI", 13, 0, 13
	CMP_SI_COLON_BP DB "392C", 13, "CMP WORD PTR [SI], BP", 13, 0, 13
	CMP_SI_COLON_SP DB "3924", 13, "CMP WORD PTR [SI], SP", 13, 0, 13
	CMP_SI_COLON_OFFSET DB "813C", 13, "CMP WORD PTR [SI], ", 13, 1, 13
	CMP_SI_COLON_OFFSETB DB "833C", 13, "CMP WORD PTR [SI], ", 13, 2, 13
	CMP_DI_COLON_AX DB "3905", 13, "CMP WORD PTR [DI], AX", 13, 0, 13
	CMP_DI_COLON_BX DB "391D", 13, "CMP WORD PTR [DI], BX", 13, 0, 13
	CMP_DI_COLON_CX DB "390D", 13, "CMP WORD PTR [DI], CX", 13, 0, 13
	CMP_DI_COLON_DX DB "3915", 13, "CMP WORD PTR [DI], DX", 13, 0, 13
	CMP_DI_COLON_SI DB "3935", 13, "CMP WORD PTR [DI], SI", 13, 0, 13
	CMP_DI_COLON_DI DB "393D", 13, "CMP WORD PTR [DI], DI", 13, 0, 13
	CMP_DI_COLON_BP DB "392D", 13, "CMP WORD PTR [DI], BP", 13, 0, 13
	CMP_DI_COLON_SP DB "3925", 13, "CMP WORD PTR [DI], SP", 13, 0, 13
	CMP_DI_COLON_OFFSET DB "813D", 13, "CMP WORD PTR [DI], ", 13, 1, 13
	CMP_DI_COLON_OFFSETB DB "833D", 13, "CMP WORD PTR [DI], ", 13, 2, 13
	CMP_BX_COLON_AX DB "3907", 13, "CMP WORD PTR [BX], AX", 13, 0, 13
	CMP_BX_COLON_BX DB "391F", 13, "CMP WORD PTR [BX], BX", 13, 0, 13
	CMP_BX_COLON_CX DB "390F", 13, "CMP WORD PTR [BX], CX", 13, 0, 13
	CMP_BX_COLON_DX DB "3917", 13, "CMP WORD PTR [BX], DX", 13, 0, 13
	CMP_BX_COLON_SI DB "3937", 13, "CMP WORD PTR [BX], SI", 13, 0, 13
	CMP_BX_COLON_DI DB "393F", 13, "CMP WORD PTR [BX], DI", 13, 0, 13
	CMP_BX_COLON_BP DB "392F", 13, "CMP WORD PTR [BX], BP", 13, 0, 13
	CMP_BX_COLON_SP DB "3927", 13, "CMP WORD PTR [BX], SP", 13, 0, 13
	CMP_BX_COLON_OFFSET DB "813F", 13, "CMP WORD PTR [BX], ", 13, 1, 13
	CMP_BX_COLON_OFFSETB DB "833F", 13, "CMP BYTE PTR [BX], ", 13, 2, 13
	CMP_AH_AH DB "3AE4", 13, "CMP AH, AH", 13, 0, 13
	CMP_AH_AL DB "3AE0", 13, "CMP AH, AL", 13, 0, 13
	CMP_AH_BH DB "3AE7", 13, "CMP AH, BH", 13, 0, 13
	CMP_AH_BL DB "3AE7", 13, "CMP AH, BL", 13, 0, 13
	CMP_AH_CH DB "3AE3", 13, "CMP AH, CH", 13, 0, 13
	CMP_AH_CL DB "3AE5", 13, "CMP AH, CL", 13, 0, 13
	CMP_AH_DL DB "3AE1", 13, "CMP AH, DL", 13, 0, 13
	CMP_AH_DH DB "3AE2", 13, "CMP AH, DH", 13, 0, 13
	CMP_AH_SI_COLON DB "3AE6", 13, "CMP AH, BYTE PTR [SI]", 13, 0, 13
	CMP_AH_DI_COLON DB "3A24", 13, "CMP AH, BYTE PTR [DI]", 13, 0, 13
	CMP_AH_BX_COLON DB "3A25", 13, "CMP AH, BYTE PTR [BX]", 13, 0, 13
	CMP_AH_OFFSET DB "80FC", 13, "CMP AH, ", 13, 2, 13
	CMP_AL_AH DB "3AC4", 13, "CMP AL, AH", 13, 0, 13
	CMP_AL_AL DB "3AC0", 13, "CMP AL, AL", 13, 0, 13
	CMP_AL_BH DB "3AC7", 13, "CMP AL, BH", 13, 0, 13
	CMP_AL_BL DB "3AC3", 13, "CMP AL, BL", 13, 0, 13
	CMP_AL_CH DB "3AC5", 13, "CMP AL, CH", 13, 0, 13
	CMP_AL_CL DB "3AC1", 13, "CMP AL, CL", 13, 0, 13
	CMP_AL_DL DB "3AC2", 13, "CMP AL, DL", 13, 0, 13
	CMP_AL_DH DB "3AC6", 13, "CMP AL, DH", 13, 0, 13
	CMP_AL_SI_COLON DB "3A04", 13, "CMP AL, BYTE PTR [SI]", 13, 0, 13
	CMP_AL_DI_COLON DB "3A05", 13, "CMP AL, BYTE PTR [DI]", 13, 0, 13
	CMP_AL_BX_COLON DB "3A07", 13, "CMP AL, BYTE PTR [BX]", 13, 0, 13
	CMP_AL_OFFSET DB "3C", 13, "CMP AL, ", 13, 2, 13
	CMP_BH_AH DB "3AFC", 13, "CMP BH, AH", 13, 0, 13
	CMP_BH_AL DB "3AF8", 13, "CMP BH, AL", 13, 0, 13
	CMP_BH_BH DB "3AFF", 13, "CMP BH, BH", 13, 0, 13
	CMP_BH_BL DB "3AFB", 13, "CMP BH, BL", 13, 0, 13
	CMP_BH_CH DB "3AFD", 13, "CMP BH, CH", 13, 0, 13
	CMP_BH_CL DB "3AF9", 13, "CMP BH, CL", 13, 0, 13
	CMP_BH_DL DB "3AFA", 13, "CMP BH, DL", 13, 0, 13
	CMP_BH_DH DB "3AFE", 13, "CMP BH, DH", 13, 0, 13
	CMP_BH_SI_COLON DB "3A3C", 13, "CMP BH, BYTE PTR [SI]", 13, 0, 13
	CMP_BH_DI_COLON DB "3A3D", 13, "CMP BH, BYTE PTR [DI]", 13, 0, 13
	CMP_BH_BX_COLON DB "3A3F", 13, "CMP BH, BYTE PTR [BX]", 13, 0, 13
	CMP_BH_OFFSET DB "80FF", 13, "CMP BH, ", 13, 2, 13
	CMP_BL_AH DB "3ADC", 13, "CMP BL, AH", 13, 0, 13
	CMP_BL_AL DB "3AD8", 13, "CMP BL, AL", 13, 0, 13
	CMP_BL_BH DB "3ADF", 13, "CMP BL, BH", 13, 0, 13
	CMP_BL_BL DB "3ADB", 13, "CMP BL, BL", 13, 0, 13
	CMP_BL_CH DB "3ADD", 13, "CMP BL, CH", 13, 0, 13
	CMP_BL_CL DB "3AD9", 13, "CMP BL, CL", 13, 0, 13
	CMP_BL_DL DB "3ADA", 13, "CMP BL, DL", 13, 0, 13
	CMP_BL_DH DB "3ADE", 13, "CMP BL, DH", 13, 0, 13
	CMP_BL_SI_COLON DB "3A1C", 13, "CMP BL, BYTE PTR [SI]", 13, 0, 13
	CMP_BL_DI_COLON DB "3A1D", 13, "CMP BL, BYTE PTR [DI]", 13, 0, 13
	CMP_BL_BX_COLON DB "3A1F", 13, "CMP BL, BYTE PTR [BX]", 13, 0, 13
	CMP_BL_OFFSET DB "80FB", 13, "CMP BL, ", 13, 2, 13
	CMP_CH_AH DB "3AEC", 13, "CMP CH, AH", 13, 0, 13
	CMP_CH_AL DB "3AE8", 13, "CMP CH, AL", 13, 0, 13
	CMP_CH_BH DB "3AEF", 13, "CMP CH, BH", 13, 0, 13
	CMP_CH_BL DB "3AEB", 13, "CMP CH, BL", 13, 0, 13
	CMP_CH_CH DB "3AED", 13, "CMP CH, CH", 13, 0, 13
	CMP_CH_CL DB "3AE9", 13, "CMP CH, CL", 13, 0, 13
	CMP_CH_DL DB "3AEA", 13, "CMP CH, DL", 13, 0, 13
	CMP_CH_DH DB "3AEE", 13, "CMP CH, DH", 13, 0, 13
	CMP_CH_SI_COLON DB "3A2C", 13, "CMP CH, BYTE PTR [SI]", 13, 0, 13
	CMP_CH_DI_COLON DB "3A2D", 13, "CMP CH, BYTE PTR [DI]", 13, 0, 13
	CMP_CH_BX_COLON DB "3A2F", 13, "CMP CH, BYTE PTR [BX]", 13, 0, 13
	CMP_CH_OFFSET DB "80FD", 13, "CMP CH, ", 13, 2, 13
	CMP_CL_AH DB "3ACC", 13, "CMP CL, AH", 13, 0, 13
	CMP_CL_AL DB "3AC8", 13, "CMP CL, AL", 13, 0, 13
	CMP_CL_BH DB "3ACF", 13, "CMP CL, BH", 13, 0, 13
	CMP_CL_BL DB "3ACB", 13, "CMP CL, BL", 13, 0, 13
	CMP_CL_CH DB "3ACD", 13, "CMP CL, CH", 13, 0, 13
	CMP_CL_CL DB "3AC9", 13, "CMP CL, CL", 13, 0, 13
	CMP_CL_DL DB "3ACA", 13, "CMP CL, DL", 13, 0, 13
	CMP_CL_DH DB "3ACE", 13, "CMP CL, DH", 13, 0, 13
	CMP_CL_SI_COLON DB "3A0C", 13, "CMP CL, BYTE PTR [SI]", 13, 0, 13
	CMP_CL_DI_COLON DB "3A0D", 13, "CMP CL, BYTE PTR [DI]", 13, 0, 13
	CMP_CL_BX_COLON DB "3A0F", 13, "CMP CL, BYTE PTR [BX]", 13, 0, 13
	CMP_CL_OFFSET DB "80F9", 13, "CMP CL, ", 13, 2, 13
	CMP_DL_AH DB "3AD4", 13, "CMP DL, AH", 13, 0, 13
	CMP_DL_AL DB "3AD0", 13, "CMP DL, AL", 13, 0, 13
	CMP_DL_BH DB "3AD7", 13, "CMP DL, BH", 13, 0, 13
	CMP_DL_BL DB "3AD3", 13, "CMP DL, BL", 13, 0, 13
	CMP_DL_CH DB "3AD5", 13, "CMP DL, CH", 13, 0, 13
	CMP_DL_CL DB "3AD1", 13, "CMP DL, CL", 13, 0, 13
	CMP_DL_DL DB "3AD2", 13, "CMP DL, DL", 13, 0, 13
	CMP_DL_DH DB "3AD6", 13, "CMP DL, DH", 13, 0, 13
	CMP_DL_SI_COLON DB "3A14", 13, "CMP DL, BYTE PTR [SI]", 13, 0, 13
	CMP_DL_DI_COLON DB "3A15", 13, "CMP DL, BYTE PTR [DI]", 13, 0, 13
	CMP_DL_BX_COLON DB "3A17", 13, "CMP DL, BYTE PTR [BX]", 13, 0, 13
	CMP_DL_OFFSET DB "80FA", 13, "CMP DL, ", 13, 2, 13
	CMP_DH_AH DB "3AF4", 13, "CMP DH, AH", 13, 0, 13
	CMP_DH_AL DB "3AF0", 13, "CMP DH, AL", 13, 0, 13
	CMP_DH_BH DB "3AF7", 13, "CMP DH, BH", 13, 0, 13
	CMP_DH_BL DB "3AF3", 13, "CMP DH, BL", 13, 0, 13
	CMP_DH_CH DB "3AF5", 13, "CMP DH, CH", 13, 0, 13
	CMP_DH_CL DB "3AF1", 13, "CMP DH, CL", 13, 0, 13
	CMP_DH_DL DB "3AF2", 13, "CMP DH, DL", 13, 0, 13
	CMP_DH_DH DB "3AF6", 13, "CMP DH, DH", 13, 0, 13
	CMP_DH_SI_COLON DB "3A34", 13, "CMP DH, BYTE PTR [SI]", 13, 0, 13
	CMP_DH_DI_COLON DB "3A35", 13, "CMP DH, BYTE PTR [DI]", 13, 0, 13
	CMP_DH_BX_COLON DB "3A37", 13, "CMP DH, BYTE PTR [BX]", 13, 0, 13
	CMP_DH_OFFSET DB "80FE", 13, "CMP DH, ", 13, 2, 13
	CMP_SI_COLON_AH DB "3824", 13, "CMP BYTE PTR [SI], AH", 13, 0, 13
	CMP_SI_COLON_AL DB "3804", 13, "CMP BYTE PTR [SI], AL", 13, 0, 13
	CMP_SI_COLON_BH DB "383C", 13, "CMP BYTE PTR [SI], BH", 13, 0, 13
	CMP_SI_COLON_BL DB "381C", 13, "CMP BYTE PTR [SI], BL", 13, 0, 13
	CMP_SI_COLON_CH DB "382C", 13, "CMP BYTE PTR [SI], CH", 13, 0, 13
	CMP_SI_COLON_CL DB "380C", 13, "CMP BYTE PTR [SI], CL", 13, 0, 13
	CMP_SI_COLON_DL DB "3814", 13, "CMP BYTE PTR [SI], DL", 13, 0, 13
	CMP_SI_COLON_DH DB "3834", 13, "CMP BYTE PTR [SI], DH", 13, 0, 13
	CMP_SI_COLONB_OFFSET DB "803C", 13, "CMP BYTE PTR [SI], ", 13, 2, 13
	CMP_DI_COLON_AH DB "3825", 13, "CMP BYTE PTR [DI], AH", 13, 0, 13
	CMP_DI_COLON_AL DB "3805", 13, "CMP BYTE PTR [DI], AL", 13, 0, 13
	CMP_DI_COLON_BH DB "383D", 13, "CMP BYTE PTR [DI], BH", 13, 0, 13
	CMP_DI_COLON_BL DB "381D", 13, "CMP BYTE PTR [DI], BL", 13, 0, 13
	CMP_DI_COLON_CH DB "382D", 13, "CMP BYTE PTR [DI], CH", 13, 0, 13
	CMP_DI_COLON_CL DB "380D", 13, "CMP BYTE PTR [DI], CL", 13, 0, 13
	CMP_DI_COLON_DL DB "3815", 13, "CMP BYTE PTR [DI], DL", 13, 0, 13
	CMP_DI_COLON_DH DB "3835", 13, "CMP BYTE PTR [DI], DH", 13, 0, 13
	CMP_DI_COLONB_OFFSET DB "803D", 13, "CMP BYTE PTR [DI], ", 13, 2, 13
	CMP_BX_COLON_AH DB "3827", 13, "CMP BYTE PTR [BX], AH", 13, 0, 13
	CMP_BX_COLON_AL DB "3807", 13, "CMP BYTE PTR [BX], AL", 13, 0, 13
	CMP_BX_COLON_BH DB "383F", 13, "CMP BYTE PTR [BX], BH", 13, 0, 13
	CMP_BX_COLON_BL DB "381F", 13, "CMP BYTE PTR [BX], BL", 13, 0, 13
	CMP_BX_COLON_CH DB "382F", 13, "CMP BYTE PTR [BX], CH", 13, 0, 13
	CMP_BX_COLON_CL DB "380F", 13, "CMP BYTE PTR [BX], CL", 13, 0, 13
	CMP_BX_COLON_DL DB "3817", 13, "CMP BYTE PTR [BX], DL", 13, 0, 13
	CMP_BX_COLON_DH DB "3837", 13, "CMP BYTE PTR [BX], DH", 13, 0, 13
	CMP_BX_COLONB_OFFSET DB "803F", 13, "CMP BYTE PTR [BX], ", 13, 2, 13
	SEGMENT_ES DB "26", 13, "PTR IN SEGMENT ES IN NEXT COMMAND", 13, 0, 13
	SEGMENT_CS DB "2E", 13, "PTR IN SEGMENT CS IN NEXT COMMAND", 13, 0, 13
	SEGMENT_SS DB "36", 13, "PTR IN SEGMENT SS IN NEXT COMMAND", 13, 0, 13
	_JMP DB "EB", 13, "JMP ", 13, 2, 13
	_JE DB "74", 13, "JE ", 13, 2, 13
	_JNE DB "75", 13, "JNE ", 13, 2, 13
	_JG DB "7F", 13, "JG ", 13, 2, 13
	_JGE DB "7D", 13, "JGE ", 13, 2, 13
	_JL DB "7C", 13, "JL ", 13, 2, 13
	_JLE DB "7E", 13, "JLE ", 13, 2, 13
	_JA DB "77", 13, "JA ", 13, 2, 13
	_JBE DB "76", 13, "JBE ", 13, 2, 13
	_JC DB "72", 13, "JC ", 13, 2, 13
	_JNC DB "73", 13, "JNC ", 13, 2, 13
	_JO DB "70", 13, "JO ", 13, 2, 13
	_JNO DB "71", 13, "JNO ", 13, 2, 13
	_JP DB "7A", 13, "JP ", 13, 2, 13
	_JNP DB "7B", 13, "JNP ", 13, 2, 13
	_JS DB "78", 13, "JS ", 13, 2, 13
	_JNS DB "79", 13, "JNS ", 13, 2, 13
	_INT DB "CD", 13, "INT ", 13, 2, 13
	_LOOP DB "E2", 13, "LOOP ", 13, 2, 13
	_CALL DB "E8", 13, "CALL ", 13, 1, 13
	_RET DB "C2", 13, "RET ", 13, 1, 13
	INC_AH DB "FEC4", 13, "INC AH ", 13, 0, 13
	INC_AL DB "FEC0", 13, "INC AL ", 13, 0, 13
	INC_BH DB "FEC7", 13, "INC BH ", 13, 0, 13
	INC_BL DB "FEC3", 13, "INC BL ", 13, 0, 13
	INC_CH DB "FEC5", 13, "INC CH ", 13, 0, 13
	INC_CL DB "FEC1", 13, "INC CL ", 13, 0, 13
	INC_DL DB "FEC2", 13, "INC DL ", 13, 0, 13
	INC_DH DB "FEC6", 13, "INC DH ", 13, 0, 13
	INC_SI_COLON DB "FE04", 13, "INC BYTE PTR [SI] ", 13, 0, 13
	INC_DI_COLON DB "FE05", 13, "INC BYTE PTR [DI] ", 13, 0, 13
	INC_BX_COLON DB "FE07", 13, "INC BYTE PTR [BX] ", 13, 0, 13
	INC_AX DB "40", 13, "INC AX ", 13, 0, 13
	INC_BX DB "43", 13, "INC BX ", 13, 0, 13
	INC_CX DB "41", 13, "INC CX ", 13, 0, 13
	INC_DX DB "42", 13, "INC DX ", 13, 0, 13
	INC_SI DB "46", 13, "INC SI ", 13, 0, 13
	INC_DI DB "47", 13, "INC DI ", 13, 0, 13
	INC_BP DB "45", 13, "INC BP ", 13, 0, 13
	INC_SP DB "44", 13, "INC SP ", 13, 0, 13
	INC_SI_COLONW DB "FF04", 13, "INC WORD PTR [SI] ", 13, 0, 13
	INC_DI_COLONW DB "FF05", 13, "INC WORD PTR [DI] ", 13, 0, 13
	INC_BX_COLONW DB "FF07", 13, "INC WORD PTR [BX] ", 13, 0, 13
	DEC_AX DB "48", 13, "DEC AX ", 13, 0, 13
	DEC_BX DB "4B", 13, "DEC BX ", 13, 0, 13
	DEC_CX DB "49", 13, "DEC CX ", 13, 0, 13
	DEC_DX DB "4A", 13, "DEC DX ", 13, 0, 13
	DEC_SI DB "4E", 13, "DEC SI ", 13, 0, 13
	DEC_DI DB "4F", 13, "DEC DI ", 13, 0, 13
	DEC_BP DB "4D", 13, "DEC BP ", 13, 0, 13
	DEC_SP DB "4C", 13, "DEC SP ", 13, 0, 13
	DEC_SI_COLONW DB "FF0C", 13, "DEC WORD PTR [SI] ", 13, 0, 13
	DEC_DI_COLONW DB "FF0D", 13, "DEC WORD PTR [DI] ", 13, 0, 13
	DEC_BX_COLONW DB "FF0F", 13, "DEC WORD PTR [BX] ", 13, 0, 13
	DEC_AH DB "FECC", 13, "DEC AH ", 13, 0, 13
	DEC_AL DB "FEC8", 13, "DEC AL ", 13, 0, 13
	DEC_BH DB "FECF", 13, "DEC BH ", 13, 0, 13
	DEC_BL DB "FECB", 13, "DEC BL ", 13, 0, 13
	DEC_CH DB "FECD", 13, "DEC CH ", 13, 0, 13
	DEC_CL DB "FEC9", 13, "DEC CL ", 13, 0, 13
	DEC_DL DB "FECA", 13, "DEC DL ", 13, 0, 13
	DEC_DH DB "FECE", 13, "DEC DH ", 13, 0, 13
	DEC_SI_COLON DB "FE0C", 13, "DEC BYTE PTR [SI] ", 13, 0, 13
	DEC_DI_COLON DB "FE0D", 13, "DEC BYTE PTR [DI] ", 13, 0, 13
	DEC_BX_COLON DB "FE0F", 13, "DEC BYTE PTR [BX] ", 13, 0, 13
	MUL_AH DB "F6E4", 13, "MUL AH ", 13, 0, 13
	MUL_AL DB "F6E0", 13, "MUL AL ", 13, 0, 13
	MUL_BH DB "F6E7", 13, "MUL BH ", 13, 0, 13
	MUL_BL DB "F6E3", 13, "MUL BL ", 13, 0, 13
	MUL_CH DB "F6E5", 13, "MUL CH ", 13, 0, 13
	MUL_CL DB "F6E1", 13, "MUL CL ", 13, 0, 13
	MUL_DL DB "F6E2", 13, "MUL DL ", 13, 0, 13
	MUL_DH DB "F6E6", 13, "MUL DH ", 13, 0, 13
	MUL_SI_COLON DB "F624", 13, "MUL BYTE PTR [SI] ", 13, 0, 13
	MUL_DI_COLON DB "F625", 13, "MUL BYTE PTR [DI] ", 13, 0, 13
	MUL_BX_COLON DB "F627", 13, "MUL BYTE PTR [BX] ", 13, 0, 13
	DIV_AH DB "F6F4", 13, "DIV AH ", 13, 0, 13
	DIV_AL DB "F6F0", 13, "DIV AL ", 13, 0, 13
	DIV_BH DB "F6F7", 13, "DIV BH ", 13, 0, 13
	DIV_BL DB "F6F3", 13, "DIV BL ", 13, 0, 13
	DIV_CH DB "F6F5", 13, "DIV CH ", 13, 0, 13
	DIV_CL DB "F6F1", 13, "DIV CL ", 13, 0, 13
	DIV_DL DB "F6F2", 13, "DIV DL ", 13, 0, 13
	DIV_DH DB "F6F6", 13, "DIV DH ", 13, 0, 13
	DIV_SI_COLON DB "F634", 13, "DIV BYTE PTR [SI] ", 13, 0, 13
	DIV_DI_COLON DB "F635", 13, "DIV BYTE PTR [DI] ", 13, 0, 13
	DIV_BX_COLON DB "F637", 13, "DIV BYTE PTR [BX] ", 13, 0, 13
	DIV_AX DB "F7F0", 13, "DIV AX ", 13, 0, 13
	DIV_BX DB "F7F3", 13, "DIV BX ", 13, 0, 13
	DIV_CX DB "F7F1", 13, "DIV CX ", 13, 0, 13
	DIV_DX DB "F7F2", 13, "DIV DX ", 13, 0, 13
	DIV_SI DB "F7F6", 13, "DIV SI ", 13, 0, 13
	DIV_DI DB "F7F7", 13, "DIV DI ", 13, 0, 13
	DIV_BP DB "F7F5", 13, "DIV BP ", 13, 0, 13
	DIV_SP DB "F7F4", 13, "DIV SP ", 13, 0, 13
	DIV_SI_COLONW DB "F734", 13, "DIV WORD PTR [SI] ", 13, 0, 13
	DIV_DI_COLONW DB "F735", 13, "DIV WORD PTR [DI] ", 13, 0, 13
	DIV_BX_COLONW DB "F737", 13, "DIV WORD PTR [BX] ", 13, 0, 13
	MUL_AX DB "F7E0", 13, "MUL AX ", 13, 0, 13
	MUL_BX DB "F7E3", 13, "MUL BX ", 13, 0, 13
	MUL_CX DB "F7E1", 13, "MUL CX ", 13, 0, 13
	MUL_DX DB "F7E2", 13, "MUL DX ", 13, 0, 13
	MUL_SI DB "F7E6", 13, "MUL SI ", 13, 0, 13
	MUL_DI DB "F7E7", 13, "MUL DI ", 13, 0, 13
	MUL_BP DB "F7E5", 13, "MUL BP ", 13, 0, 13
	MUL_SP DB "F7E4", 13, "MUL SP ", 13, 0, 13
	MUL_SI_COLONW DB "F724", 13, "MUL WORD PTR [SI] ", 13, 0, 13
	MUL_DI_COLONW DB "F725", 13, "MUL WORD PTR [DI] ", 13, 0, 13
	MUL_BX_COLONW DB "F727", 13, "MUL WORD PTR [BX] ", 13, 0, 13

.CODE
    start:
		call LoadDataSegment
		call ReadParameters
		call CheckIfHelp
		call BeginProcedure
		call EndProgram

        ReadParameters proc ; read parameters from commandline
				push si
				push di
				push cx
				push bx
				push ax
				pushf
				mov es:si, offset Params
				mov di, offset filename1
				mov cx, es:[si]
				xor ch, ch
				dec cx
				xor dx, dx
				mov es:si, offset Params + 2
				cmp cl, 64h
				ja ReadParametersQuit
				
			ReadParametersFirstLoop:
				mov al, es:[si]
				cmp al, ' '
				je ReadParametersPrepareSecond	
				mov [di], al
				dec cx
				inc di
				inc es:si
				cmp cx, 0
				je ReadParametersQuit
				jmp ReadParametersFirstLoop

			ReadParametersPrepareSecond:
				mov [di], BYTE PTR 0
				inc es:si
				mov di, offset filename2

			ReadParametersSecondLoop:
				mov al, es:[si]
				mov [di], al
				dec cx
				inc di
				inc es:si
				cmp cx, 0
				je ReadParametersQuit
				jmp ReadParametersSecondLoop

			ReadParametersQuit: 
				mov BYTE PTR [di], 0
				popf
				pop ax
				pop bx
				pop cx
				pop di
				pop si
				ret
		ReadParameters endp

        EndProgram proc
				mov ax, 04C00h ; quitting program
				int 21h
		EndProgram endp

        PrintChar proc ; character must be at al
				push ax
				push dx
				mov dl, al
				mov ah, 2
				int 21h
				pop dx
				pop ax
				ret
		PrintChar endp

		Print proc ; put the string in bx
				push ax
				push dx
				push bx

			PrintRepeat:
				mov al, BYTE PTR [bx]
				cmp al, 0
				je PrintQuit
				mov dl, BYTE PTR [bx]
				call PrintChar
				inc bx
				jmp PrintRepeat

			PrintQuit:
				pop bx
				pop dx
				pop ax
				ret
		Print endp	

        LoadDataSegment proc
				push ax
				mov ax, @data ; loading the data segment
				mov ds, ax
				pop ax
				ret
		LoadDataSegment endp

		OpenFile proc ; filename in si, handle in bx, mode in al
				push cx
				push dx
				mov ah, 3dh
				mov cx, 0
				mov dx, si
				int 21h
				jc OpenFileError
				mov bx, ax
				pop dx
				pop cx
				ret
				
			OpenFileError:
				mov bx, offset OpenError
				call Print
				mov bx, offset HelpMessage
				call Print
				call EndProgram
		OpenFile endp

		CreateFile proc ; filename in si
				push ax
				mov ah, 3ch
				xor cx, cx
				mov dx, si
				int 21h
				jc CreateFileError
				pop ax
				ret

			CreateFileError:
				mov bx, offset CreateError
				call Print
				call EndProgram
		CreateFile endp

		CloseFile proc ; file handle in bx
				push ax
				mov ah, 3eh
				int 21h
				jc CloseFileError
				pop ax
				ret

			CloseFileError:
				mov bx, offset CloseError
				call EndProgram
		CloseFile endp

		ReadFile proc ; Reads a single byte, handle in bx, offset cx, buffer is ReadBuffer
				; if file end is reached, dx is set to 1, otherwise it is 0
				push ax
				push si
				mov si, offset ReadBuffer
				add si, cx
				mov dx, si
				push cx
				mov cx, 1
				mov ah, 3fh
				int 21h
				jc ReadFileError
				xor dx, dx
				cmp ax, 0
				jne ReadFileNormal
				mov dx, 1

			ReadFileNormal:
				pop cx
				push di
				mov di, offset OpcodeLength
				inc WORD PTR [di]
				pop di
				mov si, offset ReadBuffer
				add si, cx
				add si, ax
				inc si
				mov WORD PTR [si], 0
				pop si
				pop ax
				ret

			ReadFileError:
				mov bx, offset ReadFileError
				call Print
				mov bx, offset HelpMessage
				call Print
				call EndProgram
		ReadFile endp

		WriteLine proc ; handle in bx, buffer in si, length in cx
				mov ah, 40h
				mov dx, si
				int 21h
				jc WriteLineError
				ret

			WriteLineError:
				mov bx, offset WriteError
				call Print
				call EndProgram
		WriteLine endp

		SaveHex proc ; from 0 to FF, content in ax
				push cx
				push dx
				push di
				push si
				mov di, offset OpcodeIndex
				mov si, offset Opcode
				add si, [di]
				xor cx, cx
				xor dx, dx
				mov cx, 16
				div cx
				call IntToChar
				mov BYTE PTR [si], al
				inc si
				inc WORD PTR [di]
				mov ax, dx
				call IntToChar
				mov BYTE PTR [si], al ; HERE !!!!! HOW IS IT CALLED NO ONE KNOWS
				inc si
				inc WORD PTR [di]
				pop si ; HERE!!!
				pop di
				pop dx
				pop cx
				ret
		SaveHex endp

		IntToChar proc ; char in al
				cmp al, 9
				jg IntToCharAlpha
				add al, 48
				jmp IntToCharEnd
			IntToCharAlpha:
				add al, 55
			IntToCharEnd:
				ret
		IntToChar endp

		StringCompare proc ; si and di are compared, ax = 0 equal, ax = 1 not equal
				push cx
				push dx	
				xor ax, ax

			StringCompareContinue:
				mov dl, [si]
				mov dh, [di]
				cmp dl, dh
				jne StringCompareTerminateBad
				cmp dl, 0
				je StringCompareTerminateGood
				inc si
				inc di
				jmp StringCompareContinue

			StringCompareTerminateBad:
				mov ax, 1

			StringCompareTerminateGood:
				pop dx
				pop cx
				ret
		StringCompare endp

		StringSubstring proc ; if si is di substring or vice versa from starting position, ax = 0 substring, ax = 1 not substring, ch the comparing character for di, cl for si, returns cx as length
				push dx	
				push bx
				xor bx, bx
				xor ax, ax
				
			StringSubstringContinue:
				mov dl, [si]
				mov dh, [di]
				cmp dl, cl
				je StringSubstringEndProgram
				cmp dh, ch
				je StringSubstringTerminateGood
				cmp dl, dh
				jne StringSubstringTerminateBad
				inc si
				inc di
				inc bx
				jmp StringSubstringContinue

			StringSubstringTerminateBad:
				mov ax, 1
				xor cx, cx

			StringSubstringTerminateBadRestore:
				cmp bx, 0
				je StringSubstringSkipLength
				dec bx
				dec si
				jne StringSubstringTerminateBadRestore

			StringSubstringTerminateGood:
				mov cx, bx

			StringSubstringSkipLength:
				pop bx
				pop dx
				ret

			StringSubstringEndProgram:
				call EndProgram
		StringSubstring endp

		StringLength proc ; string in si, length returned in cx
				push si

			StringLengthContinue:
				cmp BYTE PTR [si], 0
				je StringLengthTerminate
				inc si
				jmp StringLengthContinue
			
			StringLengthTerminate:
				mov cx, si
				pop si
				sub cx, si
				ret	
		StringLength endp

		StringCopy proc ; source in si, destination in di, ah is the character to meet upon stoppage
			StringCopyContinue:
				cmp BYTE PTR [si], ah
				je StringCopyTerminate
				push ax
				mov ah, BYTE PTR [si]
				mov BYTE PTR [di], ah
				pop ax
				inc si
				inc di
				jmp StringCopyContinue

			StringCopyTerminate:
				mov BYTE PTR [di], 0
				ret
		StringCopy endp

		PrintAddress proc ; number in si
				push cx
				push dx
				push ax
				push bx
				mov bx, offset AddressBuffer
				mov dx, [si]
				mov cx, 4 ; divide four times

			PrintAddressContinue:
				cmp cx, 0
				je PrintAddressQuit
				mov ax, dx
				xor dx, dx
				push cx
				mov cx, 16
				div cx
				push ax
				mov ax, dx
				call IntToChar
				mov [bx], ax
				inc bx
				pop ax
				mov dx, ax
				pop cx
				dec cx
				jmp PrintAddressContinue

			PrintAddressQuit:
				mov si, offset AddressBuffer
				call StringReverse
				push si
				mov si, offset AddressBuffer
				mov cx, 4
				mov bx, handle2
				call WriteLine
				pop si
				pop bx
				pop ax
				pop dx
				pop cx
				ret

		PrintAddress endp

		StringReverse proc ; string in si
				push di
				push cx
				mov di, si
				xor cx, cx

			StringReverseFindEnd:
				cmp BYTE PTR [di], 0
				je StringReverseBegin
				inc di
				inc cx
				jmp StringReverseFindEnd

			StringReverseBegin:
				dec di
				push ax
				xor ax, ax
				mov ax, cx
				mov cx, 2
				div cx

			StringReverseRepeat:	
				cmp ax, 0
				je StringReverseTerminate
				mov cl, [si]
				mov ch, [di]
				mov [si], ch
				mov [di], cl
				inc si
				dec di
				dec ax
				jmp StringReverseRepeat

			StringReverseTerminate:
				mov si, di
				pop cx
				pop ax
				pop di
				ret
		StringReverse endp
		
		CheckIfHelp proc
				push ax
				push di
				push si
				mov di, offset HelpPrompt
				mov si, offset filename1
				call StringCompare
				cmp ax, 0
				jne CheckIfHelpContinue
				mov bx, offset HelpMessage
				call Print
				call EndProgram
				
			CheckIfHelpContinue:
				pop si
				pop di
				pop ax
				ret
		CheckIfHelp endp

		BeginProcedure proc
				push di
				mov di, offset ReadAlready
				cmp BYTE PTR [di], 1
				je BeginProcedureCloseFiles
				mov BYTE PTR [di], 1
				pop di

				push ax
				mov al, 0
				mov si, offset filename1
				call OpenFile
				mov handle1, bx
				pop ax

				mov si, offset filename2
				call CreateFile

				push ax
				mov al, 2
				mov si, offset filename2
				call OpenFile
				mov handle2, bx
				pop ax

				xor dx, dx ;counter for printing
				
			BeginProcedureKeepReading:
				mov bx, handle1
				xor cx, cx
				xor dx, dx
				call ReadFile
				cmp dx, 1
				je BeginProcedureStopReading
				mov bx, offset ReadBuffer
				mov ax, [bx]
				call SaveHex
				jmp BeginProcedureKeepReading

			BeginProcedureStopReading:
				mov bx, handle1
				call CloseFile

				push si
				mov si, offset OpcodeLength
				push ax
				mov ax, [si]
				push cx
				mov cx, 2
				push dx
				xor dx, dx
				mul cx
				mov [si], ax
				pop dx
				pop cx
				pop ax
				pop si
				mov si, offset Opcode
				push di
				mov di, offset OpcodeIndex
				mov WORD PTR [di], 0
				pop di

				call IterateOpcode

			BeginProcedureCloseFiles:
				

				mov bx, handle2
				call CloseFile
				ret
		BeginProcedure endp

		PasteOpcode proc ; PrintBuffer in bx, Opcode with offset in si
				push si
				mov si, offset Opcode
				push di
				mov di, offset TemporaryOpcodeIndex
				add si, [di]
				pop di

			PasteOpcodeLoop:
				cmp cx, 0
				je PasteOpcodeEnd
				push ax
				mov ah, [si]
				mov [bx], ah
				pop ax
				inc bx
				inc si
				dec cx
				jmp PasteOpcodeLoop

			PasteOpcodeEnd:
				pop si
				ret
		PasteOpcode endp

		FillBlanks proc ; Buffer in bx, cx is how much
			FillBlanksLoop:
				cmp cx, 0
				je FillBlanksEnd
				mov BYTE PTR [bx], " "
				inc bx
				dec cx
				jmp FillBlanksLoop

			FillBlanksEnd:
				ret
		FillBlanks endp

		AddNullTerminator proc ; string in bx
			mov BYTE PTR [bx], 0
			ret
		AddNullTerminator endp

		PrintUnknown proc
				push bx
				push si
				mov si, offset CurrentAddress
				call PrintAddress
				mov bx, offset PrintBuffer
				mov BYTE PTR [bx], ":"
				inc bx
				mov BYTE PTR [bx], " "
				inc bx
				pop si
				push si
				push di
				push ax
				mov si, offset TemporaryOpcodeIndex
				mov di, offset OpcodeIndex
				mov ax, [di]
				mov [si], ax
				pop ax
				pop di
				pop si
				mov cx, 2
				call PasteOpcode
				mov cx, 16
				call FillBlanks
				mov si, offset UnknownCommand
				push ax
				push di
				mov di, bx
				mov ah, 0
				call StringCopy
				mov bx, di
				pop di
				pop ax
				push di
				mov di, offset OpcodeIndex
				add WORD PTR [di], 2
				mov di, offset CurrentAddress
				add WORD PTR [di], 1
				pop di
				mov BYTE PTR [bx], CR
				inc bx
				mov BYTE PTR [bx], LF
				inc bx
				call AddNullTerminator
				push cx
				push si 
				mov si, offset PrintBuffer
				call StringLength
				mov bx, handle2
				mov si, offset PrintBuffer
				call WriteLine
				pop si
				pop cx
				pop bx
				ret
		PrintUnknown endp
						; goal: modify the function, that it adds to OpcodeIndex after reading Opcode
		ReadAddress proc ; reads four bytes
				push si
				push di
				push bx
				mov si, offset Opcode
				mov di, offset OpcodeIndex
				mov bx, offset AddressBuffer
				add si, WORD PTR [di]
				push cx
				mov ch, BYTE PTR [si+2]
				mov [bx], ch
				inc bx
				mov ch, BYTE PTR [si+3]
				mov [bx], ch
				inc bx
				mov ch, BYTE PTR [si]
				mov [bx], ch
				inc bx
				mov ch, BYTE PTR [si+1]
				mov [bx], ch
				pop cx

				push bx
				push cx
				mov bx, handle2
				mov cx, 4
				mov si, offset AddressBuffer
				call WriteLine
				mov cx, 2
				mov si, offset NewlineBuffer
				call WriteLine
				pop cx
				pop bx

				push si
				mov si, offset CurrentAddress
				add WORD PTR [si], 2
				mov si, offset OpcodeIndex
				add WORD PTR [si], 4
				pop si
				pop bx
				pop di
				pop si
				ret
		ReadAddress endp

		ReadBytes proc ; reads two bytes
				push si
				push di
				push bx
				mov si, offset Opcode
				mov di, offset OpcodeIndex
				mov bx, offset AddressBuffer
				add si, WORD PTR [di]
				push cx
				mov ch, BYTE PTR [si]
				mov [bx], ch
				inc bx
				mov ch, BYTE PTR [si+1]
				mov [bx], ch
				pop cx

				push bx
				push cx
				mov bx, handle2
				mov cx, 2
				mov si, offset AddressBuffer
				call WriteLine
				mov cx, 2
				mov si, offset NewlineBuffer
				call WriteLine
				pop cx
				pop bx

				push si
				mov si, offset CurrentAddress
				add WORD PTR [si], 1
				mov si, offset OpcodeIndex
				add WORD PTR [si], 2
				pop si
				pop bx
				pop di
				pop si
				ret
		ReadBytes endp

		CheckIfGood proc	; Opcode in si, object to compare to in di
				push cx
				push ax
				mov cl, 0 ; for si
				mov ch, 13 ; for di
				call StringSubstring
				cmp ax, 1
				je CheckIfGoodEndRefer
				inc di
				push bx
				mov si, offset CurrentAddress
				call PrintAddress
				push si
				push di
				mov si, offset TemporaryOpcodeIndex 
				mov di, offset OpcodeIndex
				push ax
				mov ax, WORD PTR [di]
				mov WORD PTR [si], ax
				pop ax
				pop di
				mov si, offset OpcodeIndex
				add [si], cx
				mov si, offset CurrentAddress
				
				push cx
				push ax
				push dx
				mov ax, cx
				xor dx, dx
				mov cx, 2
				div cx
				mov cx, ax
				pop dx
				pop ax
				add [si], cx
				pop cx
				pop si
				mov bx, offset PrintBuffer
				mov BYTE PTR [bx], ":"
				inc bx
				mov BYTE PTR [bx], " "
				inc bx
				jmp CheckIfGoodSkipRefer

			CheckIfGoodEndRefer:
				jmp CheckIfGoodEnd

			CheckIfGoodSkipRefer:
				
				push cx
				call PasteOpcode
				pop cx	

				push ax
				mov ax, 18
				not cx
				inc cx
				add ax, cx
				mov cx, ax
				pop ax
				call FillBlanks

				;di has command name now
				mov si, di
				mov di, bx
				push ax
				mov ah, 13
				call StringCopy
				
				pop ax
				mov bx, di
				inc si
				cmp BYTE PTR [si], 0
				je CheckIfGoodSkipAddress
				cmp BYTE PTR [si], 2
				je CheckIfGoodSkipAddressBytes
				pop bx	
				pop ax
				pop cx
				call AddNullTerminator
				push bx
				push si
				mov si, offset PrintBuffer
				call StringLength
				mov bx, handle2
				mov si, offset PrintBuffer
				call WriteLine
				pop si
				pop bx
				call ReadAddress
				mov ax, 0
				ret

			CheckIfGoodSkipAddress:
				mov BYTE PTR [bx], CR
				inc bx
				mov BYTE PTR [bx], LF
				inc bx
				call AddNullTerminator
				pop bx
				push bx
				push si
				mov si, offset PrintBuffer
				call StringLength
				mov bx, handle2
				mov si, offset PrintBuffer
				call WriteLine
				pop si
				pop bx
				pop ax
				pop cx
				mov ax, 0
				ret

			CheckIfGoodEnd:
				pop ax
				pop cx
				mov ax, 1
				ret

			CheckIfGoodSkipAddressBytes:
				pop bx	
				pop ax
				pop cx
				call AddNullTerminator
				push bx
				push si
				mov si, offset PrintBuffer
				call StringLength
				mov bx, handle2
				mov si, offset PrintBuffer
				call WriteLine
				pop si
				pop bx
				call ReadBytes
				mov ax, 0
				ret
		CheckIfGood endp

		IterateOpcode proc
			IterateOpcodeLoop:
				push di
				push si
				mov si, offset OpcodeLength
				mov di, offset OpcodeIndex
				push ax
				mov ax, WORD PTR [si]
				cmp WORD PTR [di], ax
				jg IterateOpcodeEnd
				pop ax
				pop si
				pop di
				mov si, offset Opcode
				cmp BYTE PTR [si], 0
				je IterateOpcodeEnd
				push di
				mov di, offset OpcodeIndex
				add si, WORD PTR [di]
				pop di

				cmp BYTE PTR [si], 0
				je IterateOpcodeEnd
				call FindOpcode
				cmp ax, 0
				je IterateOpcodeLoop
				call PrintUnknown
				jmp IterateOpcodeLoop

			IterateOpcodeEnd:
				ret				
		IterateOpcode endp

		FindOpcode proc
				mov ax, 1
				mov di, offset PUSH_ES
				call CheckIfGood
				cmp ax, 1
				je SKIP_1
				ret

			SKIP_1:
				mov di, offset PUSH_CS
				call CheckIfGood
				cmp ax, 1
				je SKIP_2
				ret

			SKIP_2:
				mov di, offset PUSH_SS
				call CheckIfGood
				cmp ax, 1
				je SKIP_3
				ret

			SKIP_3:
				mov di, offset PUSH_DS
				call CheckIfGood
				cmp ax, 1
				je SKIP_4
				ret

			SKIP_4:
				mov di, offset PUSH_ES_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_5
				ret

			SKIP_5:
				mov di, offset PUSH_CS_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_6
				ret
			
			SKIP_6:
				mov di, offset PUSH_SS_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_7
				ret

			SKIP_7:
				mov di, offset PUSH_DS_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_8
				ret

			SKIP_8:
				mov di, offset PUSH_REG
				call CheckIfGood
				cmp ax, 1
				je SKIP_9
				ret	
			
			SKIP_9:
				mov di, offset PUSH_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_10
				ret	

			SKIP_10:
				mov di, offset PUSH_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_11
				ret	

			SKIP_11:
				mov di, offset PUSH_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_12
				ret	

			SKIP_12:
				mov di, offset PUSH_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_13
				ret	

			SKIP_13:
				mov di, offset PUSH_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_14
				ret	

			SKIP_14:
				mov di, offset PUSH_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_15
				ret	
			
			SKIP_15:
				mov di, offset PUSH_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_EXTRA1
				ret	
			SKIP_EXTRA1:
				mov di, offset PUSH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_EXTRA1_1
				ret	
			SKIP_EXTRA1_1:
				mov di, offset PUSH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_EXTRA1_2
				ret	
			SKIP_EXTRA1_2:
				mov di, offset PUSH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_EXTRA1_3
				ret	
			SKIP_EXTRA1_3:
				mov di, offset SEGMENT_CS
				call CheckIfGood
				cmp ax, 1
				je SKIP_EXTRA1_4
				ret  
    
			SKIP_EXTRA1_4:
				mov di, offset SEGMENT_ES
				call CheckIfGood
				cmp ax, 1
				je SKIP_EXTRA1_5
				ret  
			
			SKIP_EXTRA1_5:
				mov di, offset SEGMENT_SS
				call CheckIfGood
				cmp ax, 1
				je SKIP_16
				ret	  

			SKIP_16:
				mov di, offset MOV_AX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_17
				ret		

			SKIP_17:
				mov di, offset MOV_AX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_18
				ret	

			SKIP_18:
				mov di, offset MOV_AX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_19
				ret		

			SKIP_19:
				mov di, offset MOV_AX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_20
				ret		

			SKIP_20:
				mov di, offset MOV_AX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_21
				ret		

			SKIP_21:
				mov di, offset MOV_AX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_22
				ret	
				
			SKIP_22:
				mov di, offset MOV_AX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_23
				ret		

			SKIP_23:
				mov di, offset MOV_AX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_24
				ret	

			SKIP_24:
				mov di, offset MOV_AX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_25
				ret		

			SKIP_25:
				mov di, offset MOV_AX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_26
				ret		

			SKIP_26:
				mov di, offset MOV_AX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_27
				ret		

			SKIP_27:
				mov di, offset MOV_AX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_28
				ret	

			SKIP_28:
				mov di, offset MOV_BX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_29
				ret		

			SKIP_29:
				mov di, offset MOV_BX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_30
				ret	

			SKIP_30:
				mov di, offset MOV_BX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_31
				ret		

			SKIP_31:
				mov di, offset MOV_BX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_32
				ret		

			SKIP_32:
				mov di, offset MOV_BX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_33
				ret		

			SKIP_33:
				mov di, offset MOV_BX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_34
				ret	
				
			SKIP_34:
				mov di, offset MOV_BX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_35
				ret		

			SKIP_35:
				mov di, offset MOV_BX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_36
				ret	

			SKIP_36:
				mov di, offset MOV_BX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_37
				ret		

			SKIP_37:
				mov di, offset MOV_BX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_38
				ret		

			SKIP_38:
				mov di, offset MOV_BX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_39
				ret		

			SKIP_39:
				mov di, offset MOV_BX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_40
				ret		

			SKIP_40:
				mov di, offset MOV_CX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_41
				ret		

			SKIP_41:
				mov di, offset MOV_CX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_42
				ret	

			SKIP_42:
				mov di, offset MOV_CX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_43
				ret		

			SKIP_43:
				mov di, offset MOV_CX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_44
				ret		

			SKIP_44:
				mov di, offset MOV_CX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_45
				ret		

			SKIP_45:
				mov di, offset MOV_CX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_46
				ret	
				
			SKIP_46:
				mov di, offset MOV_CX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_47
				ret		

			SKIP_47:
				mov di, offset MOV_CX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_48
				ret	

			SKIP_48:
				mov di, offset MOV_CX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_49
				ret		

			SKIP_49:
				mov di, offset MOV_CX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_50
				ret		

			SKIP_50:
				mov di, offset MOV_CX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_51
				ret		

			SKIP_51:
				int 3
				mov di, offset MOV_CX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_52
				ret		

			SKIP_52:
				mov di, offset MOV_DX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_53
				ret		

			SKIP_53:
				mov di, offset MOV_DX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_54
				ret	

			SKIP_54:
				mov di, offset MOV_DX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_55
				ret		

			SKIP_55:
				mov di, offset MOV_DX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_56
				ret		

			SKIP_56:
				mov di, offset MOV_DX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_57
				ret		

			SKIP_57:
				mov di, offset MOV_DX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_58
				ret	
				
			SKIP_58:
				mov di, offset MOV_DX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_59
				ret		

			SKIP_59:
				mov di, offset MOV_DX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_60
				ret	

			SKIP_60:
				mov di, offset MOV_DX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_61
				ret		

			SKIP_61:
				mov di, offset MOV_DX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_62
				ret		

			SKIP_62:
				mov di, offset MOV_DX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_63
				ret		

			SKIP_63:
				mov di, offset MOV_DX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_64
				ret		

			SKIP_64:
				mov di, offset MOV_SP_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_65
				ret		

			SKIP_65:
				mov di, offset MOV_SP_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_66
				ret	

			SKIP_66:
				mov di, offset MOV_SP_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_67
				ret		

			SKIP_67:
				mov di, offset MOV_SP_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_68
				ret		

			SKIP_68:
				mov di, offset MOV_SP_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_69
				ret		

			SKIP_69:
				mov di, offset MOV_SP_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_70
				ret	
				
			SKIP_70:
				mov di, offset MOV_SP_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_71
				ret		

			SKIP_71:
				mov di, offset MOV_SP_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_72
				ret	

			SKIP_72:
				mov di, offset MOV_SP_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_73
				ret		

			SKIP_73:
				mov di, offset MOV_SP_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_74
				ret		

			SKIP_74:
				mov di, offset MOV_SP_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_75
				ret		

			SKIP_75:
				mov di, offset MOV_SP_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_76
				ret		

			SKIP_76:
				mov di, offset MOV_BP_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_77
				ret		

			SKIP_77:
				mov di, offset MOV_BP_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_78
				ret	

			SKIP_78:
				mov di, offset MOV_BP_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_79
				ret		

			SKIP_79:
				mov di, offset MOV_BP_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_80
				ret		

			SKIP_80:
				mov di, offset MOV_BP_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_81
				ret		

			SKIP_81:
				mov di, offset MOV_BP_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_82
				ret	
				
			SKIP_82:
				mov di, offset MOV_BP_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_83
				ret		

			SKIP_83:
				mov di, offset MOV_BP_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_84
				ret	

			SKIP_84:
				mov di, offset MOV_BP_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_85
				ret		

			SKIP_85:
				mov di, offset MOV_BP_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_86
				ret		

			SKIP_86:
				mov di, offset MOV_BP_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_87
				ret		

			SKIP_87:
				mov di, offset MOV_BP_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_88
				ret		

			SKIP_88:
				mov di, offset MOV_SI_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_89
				ret		

			SKIP_89:
				mov di, offset MOV_SI_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_90
				ret	

			SKIP_90:
				mov di, offset MOV_SI_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_91
				ret		

			SKIP_91:
				mov di, offset MOV_SI_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_92
				ret		

			SKIP_92:
				mov di, offset MOV_SI_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_93
				ret		

			SKIP_93:
				mov di, offset MOV_SI_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_94
				ret	
				
			SKIP_94:
				mov di, offset MOV_SI_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_95
				ret		

			SKIP_95:
				mov di, offset MOV_SI_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_96
				ret	

			SKIP_96:
				mov di, offset MOV_SI_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_97
				ret		

			SKIP_97:
				mov di, offset MOV_SI_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_98
				ret		

			SKIP_98:
				mov di, offset MOV_SI_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_99
				ret		

			SKIP_99:
				mov di, offset MOV_SI_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_100
				ret	

			SKIP_100:
				mov di, offset MOV_DI_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_101
				ret		

			SKIP_101:
				mov di, offset MOV_DI_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_102
				ret	

			SKIP_102:
				mov di, offset MOV_DI_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_103
				ret		

			SKIP_103:
				mov di, offset MOV_DI_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_104
				ret		

			SKIP_104:
				mov di, offset MOV_DI_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_105
				ret		

			SKIP_105:
				mov di, offset MOV_DI_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_106
				ret	
				
			SKIP_106:
				mov di, offset MOV_DI_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_107
				ret		

			SKIP_107:
				mov di, offset MOV_DI_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_108
				ret	

			SKIP_108:
				mov di, offset MOV_DI_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_109
				ret		

			SKIP_109:
				mov di, offset MOV_DI_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_110
				ret		

			SKIP_110:
				mov di, offset MOV_DI_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_111
				ret		

			SKIP_111:
				mov di, offset MOV_DI_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_112
				ret	

			SKIP_112:
				mov di, offset MOV_SI_COLON_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_113
				ret		

			SKIP_113:
				mov di, offset MOV_SI_COLON_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_114
				ret	

			SKIP_114:
				mov di, offset MOV_SI_COLON_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_115
				ret		

			SKIP_115:
				mov di, offset MOV_SI_COLON_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_116
				ret		

			SKIP_116:
				mov di, offset MOV_SI_COLON_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_117
				ret		

			SKIP_117:
				mov di, offset MOV_SI_COLON_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_118
				ret	
				
			SKIP_118:
				mov di, offset MOV_SI_COLON_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_119
				ret		

			SKIP_119:
				mov di, offset MOV_SI_COLON_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_120
				ret	

			SKIP_120:
				mov di, offset MOV_SI_COLON_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_121
				ret		

			SKIP_121:
				mov di, offset MOV_SI_COLON_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_122
				ret		

			SKIP_122:
				mov di, offset MOV_SI_COLON_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_123
				ret		

			SKIP_123:
				mov di, offset MOV_SI_COLON_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_124
				ret

			SKIP_124:
				mov di, offset MOV_SI_COLON_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_125
				ret

			SKIP_125:
				mov di, offset MOV_SI_COLON_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_126
				ret

			SKIP_126:
				mov di, offset MOV_SI_COLON_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_127
				ret

			SKIP_127:
				mov di, offset MOV_SI_COLON_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_128
				ret
			
			SKIP_128:
				mov di, offset MOV_SI_COLON_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_129
				ret

			SKIP_129:
				mov di, offset MOV_DI_COLON_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_130
				ret		

			SKIP_130:
				mov di, offset MOV_DI_COLON_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_131
				ret	

			SKIP_131:
				mov di, offset MOV_DI_COLON_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_132
				ret		

			SKIP_132:
				mov di, offset MOV_DI_COLON_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_133
				ret		

			SKIP_133:
				mov di, offset MOV_DI_COLON_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_134
				ret		

			SKIP_134:
				mov di, offset MOV_DI_COLON_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_135
				ret	
				
			SKIP_135:
				mov di, offset MOV_DI_COLON_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_136
				ret		

			SKIP_136:
				mov di, offset MOV_DI_COLON_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_137
				ret	

			SKIP_137:
				mov di, offset MOV_DI_COLON_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_138
				ret		

			SKIP_138:
				mov di, offset MOV_DI_COLON_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_139
				ret		

			SKIP_139:
				mov di, offset MOV_DI_COLON_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_140
				ret		

			SKIP_140:
				mov di, offset MOV_DI_COLON_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_141
				ret

			SKIP_141:
				mov di, offset MOV_DI_COLON_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_142
				ret

			SKIP_142:
				mov di, offset MOV_DI_COLON_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_143
				ret

			SKIP_143:
				mov di, offset MOV_DI_COLON_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_144
				ret

			SKIP_144:
				mov di, offset MOV_DI_COLON_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_145
				ret
			
			SKIP_145:
				mov di, offset MOV_DI_COLON_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_146
				ret

			SKIP_146:
				mov di, offset MOV_BX_COLON_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_147
				ret		

			SKIP_147:
				mov di, offset MOV_BX_COLON_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_148
				ret	

			SKIP_148:
				mov di, offset MOV_BX_COLON_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_149
				ret		

			SKIP_149:
				mov di, offset MOV_BX_COLON_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_150
				ret		

			SKIP_150:
				mov di, offset MOV_BX_COLON_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_151
				ret		

			SKIP_151:
				mov di, offset MOV_BX_COLON_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_152
				ret	
				
			SKIP_152:
				mov di, offset MOV_BX_COLON_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_153
				ret		

			SKIP_153:
				mov di, offset MOV_BX_COLON_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_154
				ret	

			SKIP_154:
				mov di, offset MOV_BX_COLON_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_155
				ret		

			SKIP_155:
				mov di, offset MOV_BX_COLON_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_156
				ret		

			SKIP_156:
				mov di, offset MOV_BX_COLON_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_157
				ret		

			SKIP_157:
				mov di, offset MOV_BX_COLON_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_158
				ret

			SKIP_158:
				mov di, offset MOV_BX_COLON_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_159
				ret

			SKIP_159:
				mov di, offset MOV_BX_COLON_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_160
				ret

			SKIP_160:
				mov di, offset MOV_BX_COLON_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_161
				ret

			SKIP_161:
				mov di, offset MOV_BX_COLON_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_162
				ret
			
			SKIP_162:
				mov di, offset MOV_BX_COLON_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_163
				ret
			
			SKIP_163:
				mov di, offset POP_ES
				call CheckIfGood
				cmp ax, 1
				je SKIP_164
				ret
			SKIP_164:
				mov di, offset POP_DS
				call CheckIfGood
				cmp ax, 1
				je SKIP_165
				ret
			SKIP_165:
				mov di, offset POP_SS
				call CheckIfGood
				cmp ax, 1
				je SKIP_166
				ret
			SKIP_166:
				mov di, offset POP_ES_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_167
				ret
			SKIP_167:
				mov di, offset POP_SS_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_168
				ret
			SKIP_168:
				mov di, offset POP_CS_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_169
				ret
			SKIP_169:
				mov di, offset POP_DS_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_170
				ret
			SKIP_170:
				mov di, offset POP_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_171
				ret
			SKIP_171:
				mov di, offset POP_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_172
				ret
			SKIP_172:
				mov di, offset POP_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_173
				ret
			SKIP_173:
				mov di, offset POP_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_174
				ret
			SKIP_174:
				mov di, offset POP_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_175
				ret
			SKIP_175:
				mov di, offset POP_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_176
				ret
			SKIP_176:
				mov di, offset POP_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_177
				ret
			SKIP_177:
				mov di, offset POP_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_178
				ret
			SKIP_178:
				mov di, offset POP_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_179
				ret
			SKIP_179:
				mov di, offset POP_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_180
				ret
			SKIP_180:
				mov di, offset POP_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_181
				ret

			SKIP_181:
				mov di, offset MOV_AH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_182
				ret
                
			SKIP_182:
				mov di, offset MOV_AH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_183
				ret
                
			SKIP_183:
				mov di, offset MOV_AH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_184
				ret
                
			SKIP_184:
				mov di, offset MOV_AH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_185
				ret
                
			SKIP_185:
				mov di, offset MOV_AH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_186
				ret
                
			SKIP_186:
				mov di, offset MOV_AH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_187
				ret
                
			SKIP_187:
				mov di, offset MOV_AH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_188
				ret
                
			SKIP_188:
				mov di, offset MOV_AH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_189
				ret
                
			SKIP_189:
				mov di, offset MOV_AH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_190
				ret
                
			SKIP_190:
				mov di, offset MOV_AH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_191
				ret
                
			SKIP_191:
				mov di, offset MOV_AH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_192
				ret
                
			SKIP_192:
				mov di, offset MOV_AH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_193
				ret
                
			SKIP_193:
				mov di, offset MOV_AL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_194
				ret
                
			SKIP_194:
				mov di, offset MOV_AL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_195
				ret
                
			SKIP_195:
				mov di, offset MOV_AL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_196
				ret
                
			SKIP_196:
				mov di, offset MOV_AL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_197
				ret
                
			SKIP_197:
				mov di, offset MOV_AL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_198
				ret
                
			SKIP_198:
				mov di, offset MOV_AL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_199
				ret
                
			SKIP_199:
				mov di, offset MOV_AL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_200
				ret
                
			SKIP_200:
				mov di, offset MOV_AL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_201
				ret
                
			SKIP_201:
				mov di, offset MOV_AL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_202
				ret
                
			SKIP_202:
				mov di, offset MOV_AL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_203
				ret
                
			SKIP_203:
				mov di, offset MOV_AL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_204
				ret
                
			SKIP_204:
				mov di, offset MOV_AL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_205
				ret
                
			SKIP_205:
				mov di, offset MOV_BH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_206
				ret
                
			SKIP_206:
				mov di, offset MOV_BH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_207
				ret
                
			SKIP_207:
				mov di, offset MOV_BH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_208
				ret
                
			SKIP_208:
				mov di, offset MOV_BH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_209
				ret
                
			SKIP_209:
				mov di, offset MOV_BH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_210
				ret
                
			SKIP_210:
				mov di, offset MOV_BH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_211
				ret
                
			SKIP_211:
				mov di, offset MOV_BH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_212
				ret
                
			SKIP_212:
				mov di, offset MOV_BH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_213
				ret
                
			SKIP_213:
				mov di, offset MOV_BH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_214
				ret
                
			SKIP_214:
				mov di, offset MOV_BH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_215
				ret
                
			SKIP_215:
				mov di, offset MOV_BH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_216
				ret
                
			SKIP_216:
				mov di, offset MOV_BH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_217
				ret
                
			SKIP_217:
				mov di, offset MOV_BL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_218
				ret
                
			SKIP_218:
				mov di, offset MOV_BL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_219
				ret
                
			SKIP_219:
				mov di, offset MOV_BL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_220
				ret
                
			SKIP_220:
				mov di, offset MOV_BL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_221
				ret
                
			SKIP_221:
				mov di, offset MOV_BL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_222
				ret
                
			SKIP_222:
				mov di, offset MOV_BL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_223
				ret
                
			SKIP_223:
				mov di, offset MOV_BL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_224
				ret
                
			SKIP_224:
				mov di, offset MOV_BL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_225
				ret
                
			SKIP_225:
				mov di, offset MOV_BL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_226
				ret
                
			SKIP_226:
				mov di, offset MOV_BL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_227
				ret
                
			SKIP_227:
				mov di, offset MOV_BL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_228
				ret
                
			SKIP_228:
				mov di, offset MOV_BL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_229
				ret
                
			SKIP_229:
				mov di, offset MOV_CH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_230
				ret
                
			SKIP_230:
				mov di, offset MOV_CH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_231
				ret
                
			SKIP_231:
				mov di, offset MOV_CH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_232
				ret
                
			SKIP_232:
				mov di, offset MOV_CH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_233
				ret
                
			SKIP_233:
				mov di, offset MOV_CH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_234
				ret
                
			SKIP_234:
				mov di, offset MOV_CH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_235
				ret
                
			SKIP_235:
				mov di, offset MOV_CH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_236
				ret
                
			SKIP_236:
				mov di, offset MOV_CH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_237
				ret
                
			SKIP_237:
				mov di, offset MOV_CH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_238
				ret
                
			SKIP_238:
				mov di, offset MOV_CH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_239
				ret
                
			SKIP_239:
				mov di, offset MOV_CH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_240
				ret
                
			SKIP_240:
				mov di, offset MOV_CH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_241
				ret
                
			SKIP_241:
				mov di, offset MOV_CL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_242
				ret
                
			SKIP_242:
				mov di, offset MOV_CL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_243
				ret
                
			SKIP_243:
				mov di, offset MOV_CL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_244
				ret
                
			SKIP_244:
				mov di, offset MOV_CL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_245
				ret
                
			SKIP_245:
				mov di, offset MOV_CL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_246
				ret
                
			SKIP_246:
				mov di, offset MOV_CL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_247
				ret
                
			SKIP_247:
				mov di, offset MOV_CL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_248
				ret
                
			SKIP_248:
				mov di, offset MOV_CL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_249
				ret
                
			SKIP_249:
				mov di, offset MOV_CL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_250
				ret
                
			SKIP_250:
				mov di, offset MOV_CL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_251
				ret
                
			SKIP_251:
				mov di, offset MOV_CL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_252
				ret
                
			SKIP_252:
				mov di, offset MOV_CL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_253
				ret
                
			SKIP_253:
				mov di, offset MOV_DL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_254
				ret
                
			SKIP_254:
				mov di, offset MOV_DL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_255
				ret
                
			SKIP_255:
				mov di, offset MOV_DL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_256
				ret
                
			SKIP_256:
				mov di, offset MOV_DL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_257
				ret
                
			SKIP_257:
				mov di, offset MOV_DL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_258
				ret
                
			SKIP_258:
				mov di, offset MOV_DL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_259
				ret
                
			SKIP_259:
				mov di, offset MOV_DL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_260
				ret
                
			SKIP_260:
				mov di, offset MOV_DL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_261
				ret
                
			SKIP_261:
				mov di, offset MOV_DL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_262
				ret
                
			SKIP_262:
				mov di, offset MOV_DL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_263
				ret
                
			SKIP_263:
				mov di, offset MOV_DL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_264
				ret
                
			SKIP_264:
				mov di, offset MOV_DL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_265
				ret
                
			SKIP_265:
				mov di, offset MOV_DH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_266
				ret
                
			SKIP_266:
				mov di, offset MOV_DH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_267
				ret
                
			SKIP_267:
				mov di, offset MOV_DH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_268
				ret
                
			SKIP_268:
				mov di, offset MOV_DH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_269
				ret
                
			SKIP_269:
				mov di, offset MOV_DH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_270
				ret
                
			SKIP_270:
				mov di, offset MOV_DH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_271
				ret
                
			SKIP_271:
				mov di, offset MOV_DH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_272
				ret
                
			SKIP_272:
				mov di, offset MOV_DH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_273
				ret
                
			SKIP_273:
				mov di, offset MOV_DH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_274
				ret
                
			SKIP_274:
				mov di, offset MOV_DH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_275
				ret
                
			SKIP_275:
				mov di, offset MOV_DH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_276
				ret
                
			SKIP_276:
				mov di, offset MOV_DH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_277
				ret
			SKIP_277:
				mov di, offset ADD_AX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_278
				ret
                
			SKIP_278:
				mov di, offset ADD_AX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_279
				ret
                
			SKIP_279:
				mov di, offset ADD_AX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_280
				ret
                
			SKIP_280:
				mov di, offset ADD_AX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_281
				ret
                
			SKIP_281:
				mov di, offset ADD_AX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_282
				ret
                
			SKIP_282:
				mov di, offset ADD_AX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_283
				ret
                
			SKIP_283:
				mov di, offset ADD_AX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_284
				ret
                
			SKIP_284:
				mov di, offset ADD_AX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_285
				ret
                
			SKIP_285:
				mov di, offset ADD_AX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_286
				ret
                
			SKIP_286:
				mov di, offset ADD_AX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_287
				ret
                
			SKIP_287:
				mov di, offset ADD_AX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_288
				ret
                
			SKIP_288:
				mov di, offset ADD_AX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_289
				ret
                
			SKIP_289:
				mov di, offset ADD_BX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_290
				ret
                
			SKIP_290:
				mov di, offset ADD_BX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_291
				ret
                
			SKIP_291:
				mov di, offset ADD_BX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_292
				ret
                
			SKIP_292:
				mov di, offset ADD_BX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_293
				ret
                
			SKIP_293:
				mov di, offset ADD_BX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_294
				ret
                
			SKIP_294:
				mov di, offset ADD_BX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_295
				ret
                
			SKIP_295:
				mov di, offset ADD_BX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_296
				ret
                
			SKIP_296:
				mov di, offset ADD_BX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_297
				ret
                
			SKIP_297:
				mov di, offset ADD_BX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_298
				ret
                
			SKIP_298:
				mov di, offset ADD_BX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_299
				ret
                
			SKIP_299:
				mov di, offset ADD_BX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_300
				ret
                
			SKIP_300:
				mov di, offset ADD_BX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_301
				ret
                
			SKIP_301:
				mov di, offset ADD_CX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_302
				ret
                
			SKIP_302:
				mov di, offset ADD_CX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_303
				ret
                
			SKIP_303:
				mov di, offset ADD_CX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_304
				ret
                
			SKIP_304:
				mov di, offset ADD_CX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_305
				ret
                
			SKIP_305:
				mov di, offset ADD_CX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_306
				ret
                
			SKIP_306:
				mov di, offset ADD_CX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_307
				ret
                
			SKIP_307:
				mov di, offset ADD_CX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_308
				ret
                
			SKIP_308:
				mov di, offset ADD_CX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_309
				ret
                
			SKIP_309:
				mov di, offset ADD_CX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_310
				ret
                
			SKIP_310:
				mov di, offset ADD_CX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_311
				ret
                
			SKIP_311:
				mov di, offset ADD_CX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_312
				ret
                
			SKIP_312:
				mov di, offset ADD_CX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_313
				ret
                
			SKIP_313:
				mov di, offset ADD_DX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_314
				ret
                
			SKIP_314:
				mov di, offset ADD_DX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_315
				ret
                
			SKIP_315:
				mov di, offset ADD_DX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_316
				ret
                
			SKIP_316:
				mov di, offset ADD_DX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_317
				ret
                
			SKIP_317:
				mov di, offset ADD_DX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_318
				ret
                
			SKIP_318:
				mov di, offset ADD_DX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_319
				ret
                
			SKIP_319:
				mov di, offset ADD_DX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_320
				ret
                
			SKIP_320:
				mov di, offset ADD_DX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_321
				ret
                
			SKIP_321:
				mov di, offset ADD_DX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_322
				ret
                
			SKIP_322:
				mov di, offset ADD_DX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_323
				ret
                
			SKIP_323:
				mov di, offset ADD_DX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_324
				ret
                
			SKIP_324:
				mov di, offset ADD_DX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_325
				ret
                
			SKIP_325:
				mov di, offset ADD_SI_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_326
				ret
                
			SKIP_326:
				mov di, offset ADD_SI_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_327
				ret
                
			SKIP_327:
				mov di, offset ADD_SI_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_328
				ret
                
			SKIP_328:
				mov di, offset ADD_SI_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_329
				ret
                
			SKIP_329:
				mov di, offset ADD_SI_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_330
				ret
                
			SKIP_330:
				mov di, offset ADD_SI_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_331
				ret
                
			SKIP_331:
				mov di, offset ADD_SI_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_332
				ret
                
			SKIP_332:
				mov di, offset ADD_SI_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_333
				ret
                
			SKIP_333:
				mov di, offset ADD_SI_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_334
				ret
                
			SKIP_334:
				mov di, offset ADD_SI_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_335
				ret
                
			SKIP_335:
				mov di, offset ADD_SI_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_336
				ret
                
			SKIP_336:
				mov di, offset ADD_SI_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_337
				ret
                
			SKIP_337:
				mov di, offset ADD_DI_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_338
				ret
                
			SKIP_338:
				mov di, offset ADD_DI_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_339
				ret
                
			SKIP_339:
				mov di, offset ADD_DI_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_340
				ret
                
			SKIP_340:
				mov di, offset ADD_DI_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_341
				ret
                
			SKIP_341:
				mov di, offset ADD_DI_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_342
				ret
                
			SKIP_342:
				mov di, offset ADD_DI_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_343
				ret
                
			SKIP_343:
				mov di, offset ADD_DI_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_344
				ret
                
			SKIP_344:
				mov di, offset ADD_DI_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_345
				ret
                
			SKIP_345:
				mov di, offset ADD_DI_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_346
				ret
                
			SKIP_346:
				mov di, offset ADD_DI_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_347
				ret
                
			SKIP_347:
				mov di, offset ADD_DI_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_348
				ret
                
			SKIP_348:
				mov di, offset ADD_DI_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_349
				ret
                
			SKIP_349:
				mov di, offset ADD_BP_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_350
				ret
                
			SKIP_350:
				mov di, offset ADD_BP_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_351
				ret
                
			SKIP_351:
				mov di, offset ADD_BP_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_352
				ret
                
			SKIP_352:
				mov di, offset ADD_BP_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_353
				ret
                
			SKIP_353:
				mov di, offset ADD_BP_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_354
				ret
                
			SKIP_354:
				mov di, offset ADD_BP_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_355
				ret
                
			SKIP_355:
				mov di, offset ADD_BP_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_356
				ret
                
			SKIP_356:
				mov di, offset ADD_BP_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_357
				ret
                
			SKIP_357:
				mov di, offset ADD_BP_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_358
				ret
                
			SKIP_358:
				mov di, offset ADD_BP_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_359
				ret
                
			SKIP_359:
				mov di, offset ADD_BP_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_360
				ret
                
			SKIP_360:
				mov di, offset ADD_BP_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_361
				ret
                
			SKIP_361:
				mov di, offset ADD_SP_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_362
				ret
                
			SKIP_362:
				mov di, offset ADD_SP_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_363
				ret
                
			SKIP_363:
				mov di, offset ADD_SP_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_364
				ret
                
			SKIP_364:
				mov di, offset ADD_SP_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_365
				ret
                
			SKIP_365:
				mov di, offset ADD_SP_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_366
				ret
                
			SKIP_366:
				mov di, offset ADD_SP_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_367
				ret
                
			SKIP_367:
				mov di, offset ADD_SP_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_368
				ret
                
			SKIP_368:
				mov di, offset ADD_SP_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_369
				ret
                
			SKIP_369:
				mov di, offset ADD_SP_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_370
				ret
                
			SKIP_370:
				mov di, offset ADD_SP_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_371
				ret
                
			SKIP_371:
				mov di, offset ADD_SP_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_372
				ret
                
			SKIP_372:
				mov di, offset ADD_SP_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_373
				ret
                
			SKIP_373:
				mov di, offset ADD_SI_COLON_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_374
				ret
                
			SKIP_374:
				mov di, offset ADD_SI_COLON_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_375
				ret
                
			SKIP_375:
				mov di, offset ADD_SI_COLON_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_376
				ret
                
			SKIP_376:
				mov di, offset ADD_SI_COLON_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_377
				ret
                
			SKIP_377:
				mov di, offset ADD_SI_COLON_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_378
				ret
                
			SKIP_378:
				mov di, offset ADD_SI_COLON_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_379
				ret
                
			SKIP_379:
				mov di, offset ADD_SI_COLON_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_380
				ret
                
			SKIP_380:
				mov di, offset ADD_SI_COLON_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_384
				ret
                
			SKIP_384:
				mov di, offset ADD_SI_COLON_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_385
				ret
                
			SKIP_385:
				mov di, offset ADD_DI_COLON_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_386
				ret
                
			SKIP_386:
				mov di, offset ADD_DI_COLON_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_387
				ret
                
			SKIP_387:
				mov di, offset ADD_DI_COLON_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_388
				ret
                
			SKIP_388:
				mov di, offset ADD_DI_COLON_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_389
				ret
                
			SKIP_389:
				mov di, offset ADD_DI_COLON_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_390
				ret
                
			SKIP_390:
				mov di, offset ADD_DI_COLON_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_391
				ret
                
			SKIP_391:
				mov di, offset ADD_DI_COLON_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_392
				ret
                
			SKIP_392:
				mov di, offset ADD_DI_COLON_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_396
				ret
                
                
			SKIP_396:
				mov di, offset ADD_DI_COLON_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_397
				ret
                
			SKIP_397:
				mov di, offset ADD_BX_COLON_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_398
				ret
                
			SKIP_398:
				mov di, offset ADD_BX_COLON_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_399
				ret
                
			SKIP_399:
				mov di, offset ADD_BX_COLON_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_400
				ret
                
			SKIP_400:
				mov di, offset ADD_BX_COLON_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_401
				ret
                
			SKIP_401:
				mov di, offset ADD_BX_COLON_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_402
				ret
                
			SKIP_402:
				mov di, offset ADD_BX_COLON_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_403
				ret
                
			SKIP_403:
				mov di, offset ADD_BX_COLON_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_404
				ret
                
			SKIP_404:
				mov di, offset ADD_BX_COLON_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_408
				ret
                
			SKIP_408:
				mov di, offset ADD_BX_COLON_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_409
				ret

			SKIP_409:
				mov di, offset ADD_AH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_410
				ret
                
			SKIP_410:
				mov di, offset ADD_AH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_411
				ret
                
			SKIP_411:
				mov di, offset ADD_AH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_412
				ret
                
			SKIP_412:
				mov di, offset ADD_AH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_413
				ret
                
			SKIP_413:
				mov di, offset ADD_AH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_414
				ret
                
			SKIP_414:
				mov di, offset ADD_AH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_415
				ret
                
			SKIP_415:
				mov di, offset ADD_AH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_416
				ret
                
			SKIP_416:
				mov di, offset ADD_AH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_417
				ret
                
			SKIP_417:
				mov di, offset ADD_AH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_418
				ret
                
			SKIP_418:
				mov di, offset ADD_AH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_419
				ret
                
			SKIP_419:
				mov di, offset ADD_AH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_420
				ret
                
			SKIP_420:
				mov di, offset ADD_AH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_421
				ret
                
			SKIP_421:
				mov di, offset ADD_AL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_422
				ret
                
			SKIP_422:
				mov di, offset ADD_AL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_423
				ret
                
			SKIP_423:
				mov di, offset ADD_AL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_424
				ret
                
			SKIP_424:
				mov di, offset ADD_AL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_425
				ret
                
			SKIP_425:
				mov di, offset ADD_AL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_426
				ret
                
			SKIP_426:
				mov di, offset ADD_AL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_427
				ret
                
			SKIP_427:
				mov di, offset ADD_AL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_428
				ret
                
			SKIP_428:
				mov di, offset ADD_AL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_429
				ret
                
			SKIP_429:
				mov di, offset ADD_AL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_430
				ret
                
			SKIP_430:
				mov di, offset ADD_AL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_431
				ret
                
			SKIP_431:
				mov di, offset ADD_AL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_432
				ret
                
			SKIP_432:
				mov di, offset ADD_AL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_433
				ret
                
			SKIP_433:
				mov di, offset ADD_BH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_434
				ret
                
			SKIP_434:
				mov di, offset ADD_BH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_435
				ret
                
			SKIP_435:
				mov di, offset ADD_BH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_436
				ret
                
			SKIP_436:
				mov di, offset ADD_BH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_437
				ret
                
			SKIP_437:
				mov di, offset ADD_BH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_438
				ret
                
			SKIP_438:
				mov di, offset ADD_BH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_439
				ret
                
			SKIP_439:
				mov di, offset ADD_BH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_440
				ret
                
			SKIP_440:
				mov di, offset ADD_BH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_441
				ret
                
			SKIP_441:
				mov di, offset ADD_BH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_442
				ret
                
			SKIP_442:
				mov di, offset ADD_BH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_443
				ret
                
			SKIP_443:
				mov di, offset ADD_BH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_444
				ret
                
			SKIP_444:
				mov di, offset ADD_BH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_445
				ret
                
			SKIP_445:
				mov di, offset ADD_BL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_446
				ret
                
			SKIP_446:
				mov di, offset ADD_BL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_447
				ret
                
			SKIP_447:
				mov di, offset ADD_BL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_448
				ret
                
			SKIP_448:
				mov di, offset ADD_BL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_449
				ret
                
			SKIP_449:
				mov di, offset ADD_BL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_450
				ret
                
			SKIP_450:
				mov di, offset ADD_BL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_451
				ret
                
			SKIP_451:
				mov di, offset ADD_BL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_452
				ret
                
			SKIP_452:
				mov di, offset ADD_BL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_453
				ret
                
			SKIP_453:
				mov di, offset ADD_BL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_454
				ret
                
			SKIP_454:
				mov di, offset ADD_BL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_455
				ret
                
			SKIP_455:
				mov di, offset ADD_BL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_456
				ret
                
			SKIP_456:
				mov di, offset ADD_BL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_457
				ret
                
			SKIP_457:
				mov di, offset ADD_CH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_458
				ret
                
			SKIP_458:
				mov di, offset ADD_CH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_459
				ret
                
			SKIP_459:
				mov di, offset ADD_CH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_460
				ret
                
			SKIP_460:
				mov di, offset ADD_CH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_461
				ret
                
			SKIP_461:
				mov di, offset ADD_CH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_462
				ret
                
			SKIP_462:
				mov di, offset ADD_CH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_463
				ret
                
			SKIP_463:
				mov di, offset ADD_CH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_464
				ret
                
			SKIP_464:
				mov di, offset ADD_CH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_465
				ret
                
			SKIP_465:
				mov di, offset ADD_CH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_466
				ret
                
			SKIP_466:
				mov di, offset ADD_CH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_467
				ret
                
			SKIP_467:
				mov di, offset ADD_CH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_468
				ret
                
			SKIP_468:
				mov di, offset ADD_CH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_469
				ret
                
			SKIP_469:
				mov di, offset ADD_CL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_470
				ret
                
			SKIP_470:
				mov di, offset ADD_CL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_471
				ret
                
			SKIP_471:
				mov di, offset ADD_CL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_472
				ret
                
			SKIP_472:
				mov di, offset ADD_CL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_473
				ret
                
			SKIP_473:
				mov di, offset ADD_CL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_474
				ret
                
			SKIP_474:
				mov di, offset ADD_CL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_475
				ret
                
			SKIP_475:
				mov di, offset ADD_CL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_476
				ret
                
			SKIP_476:
				mov di, offset ADD_CL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_477
				ret
                
			SKIP_477:
				mov di, offset ADD_CL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_478
				ret
                
			SKIP_478:
				mov di, offset ADD_CL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_479
				ret
                
			SKIP_479:
				mov di, offset ADD_CL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_480
				ret
                
			SKIP_480:
				mov di, offset ADD_CL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_481
				ret
                
			SKIP_481:
				mov di, offset ADD_DL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_482
				ret
                
			SKIP_482:
				mov di, offset ADD_DL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_483
				ret
                
			SKIP_483:
				mov di, offset ADD_DL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_484
				ret
                
			SKIP_484:
				mov di, offset ADD_DL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_485
				ret
                
			SKIP_485:
				mov di, offset ADD_DL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_486
				ret
                
			SKIP_486:
				mov di, offset ADD_DL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_487
				ret
                
			SKIP_487:
				mov di, offset ADD_DL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_488
				ret
                
			SKIP_488:
				mov di, offset ADD_DL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_489
				ret
                
			SKIP_489:
				mov di, offset ADD_DL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_490
				ret
                
			SKIP_490:
				mov di, offset ADD_DL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_491
				ret
                
			SKIP_491:
				mov di, offset ADD_DL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_492
				ret
                
			SKIP_492:
				mov di, offset ADD_DL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_493
				ret
                
			SKIP_493:
				mov di, offset ADD_DH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_494
				ret
                
			SKIP_494:
				mov di, offset ADD_DH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_495
				ret
                
			SKIP_495:
				mov di, offset ADD_DH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_496
				ret
                
			SKIP_496:
				mov di, offset ADD_DH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_497
				ret
                
			SKIP_497:
				mov di, offset ADD_DH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_498
				ret
                
			SKIP_498:
				mov di, offset ADD_DH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_499
				ret
                
			SKIP_499:
				mov di, offset ADD_DH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_500
				ret
                
			SKIP_500:
				mov di, offset ADD_DH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_501
				ret
                
			SKIP_501:
				mov di, offset ADD_DH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_502
				ret
                
			SKIP_502:
				mov di, offset ADD_DH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_503
				ret
                
			SKIP_503:
				mov di, offset ADD_DH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_504
				ret
                
			SKIP_504:
				mov di, offset ADD_DH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_505
				ret
                
			SKIP_505:
				mov di, offset ADD_SI_COLON_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_506
				ret
                
			SKIP_506:
				mov di, offset ADD_SI_COLON_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_507
				ret
                
			SKIP_507:
				mov di, offset ADD_SI_COLON_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_508
				ret
                
			SKIP_508:
				mov di, offset ADD_SI_COLON_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_509
				ret
                
			SKIP_509:
				mov di, offset ADD_SI_COLON_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_510
				ret
                
			SKIP_510:
				mov di, offset ADD_SI_COLON_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_511
				ret
                
			SKIP_511:
				mov di, offset ADD_SI_COLON_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_512
				ret
                
			SKIP_512:
				mov di, offset ADD_SI_COLON_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_517
				ret
                
			SKIP_517:
				mov di, offset ADD_DI_COLON_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_518
				ret
                
			SKIP_518:
				mov di, offset ADD_DI_COLON_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_519
				ret
                
			SKIP_519:
				mov di, offset ADD_DI_COLON_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_520
				ret
                
			SKIP_520:
				mov di, offset ADD_DI_COLON_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_521
				ret
                
			SKIP_521:
				mov di, offset ADD_DI_COLON_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_522
				ret
                
			SKIP_522:
				mov di, offset ADD_DI_COLON_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_523
				ret
                
			SKIP_523:
				mov di, offset ADD_DI_COLON_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_524
				ret
                
			SKIP_524:
				mov di, offset ADD_DI_COLON_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_529
				ret
                
			SKIP_529:
				mov di, offset ADD_BX_COLON_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_530
				ret
                
			SKIP_530:
				mov di, offset ADD_BX_COLON_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_531
				ret
                
			SKIP_531:
				mov di, offset ADD_BX_COLON_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_532
				ret
                
			SKIP_532:
				mov di, offset ADD_BX_COLON_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_533
				ret
                
			SKIP_533:
				mov di, offset ADD_BX_COLON_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_534
				ret
                
			SKIP_534:
				mov di, offset ADD_BX_COLON_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_535
				ret
                
			SKIP_535:
				mov di, offset ADD_BX_COLON_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_536
				ret
                
			SKIP_536:
				mov di, offset ADD_BX_COLON_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_537
				ret
            			SKIP_537:
				mov di, offset SUB_AH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_538
				ret
                
			SKIP_538:
				mov di, offset SUB_AH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_539
				ret
                
			SKIP_539:
				mov di, offset SUB_AH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_540
				ret
                
			SKIP_540:
				mov di, offset SUB_AH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_541
				ret
                
			SKIP_541:
				mov di, offset SUB_AH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_542
				ret
                
			SKIP_542:
				mov di, offset SUB_AH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_543
				ret
                
			SKIP_543:
				mov di, offset SUB_AH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_544
				ret
                
			SKIP_544:
				mov di, offset SUB_AH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_545
				ret
                
			SKIP_545:
				mov di, offset SUB_AH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_546
				ret
                
			SKIP_546:
				mov di, offset SUB_AH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_547
				ret
                
			SKIP_547:
				mov di, offset SUB_AH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_548
				ret
                
			SKIP_548:
				mov di, offset SUB_AH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_549
				ret
                
			SKIP_549:
				mov di, offset SUB_AL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_550
				ret
                
			SKIP_550:
				mov di, offset SUB_AL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_551
				ret
                
			SKIP_551:
				mov di, offset SUB_AL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_552
				ret
                
			SKIP_552:
				mov di, offset SUB_AL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_553
				ret
                
			SKIP_553:
				mov di, offset SUB_AL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_554
				ret
                
			SKIP_554:
				mov di, offset SUB_AL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_555
				ret
                
			SKIP_555:
				mov di, offset SUB_AL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_556
				ret
                
			SKIP_556:
				mov di, offset SUB_AL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_557
				ret
                
			SKIP_557:
				mov di, offset SUB_AL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_558
				ret
                
			SKIP_558:
				mov di, offset SUB_AL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_559
				ret
                
			SKIP_559:
				mov di, offset SUB_AL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_560
				ret
                
			SKIP_560:
				mov di, offset SUB_AL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_561
				ret
                
			SKIP_561:
				mov di, offset SUB_BH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_562
				ret
                
			SKIP_562:
				mov di, offset SUB_BH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_563
				ret
                
			SKIP_563:
				mov di, offset SUB_BH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_564
				ret
                
			SKIP_564:
				mov di, offset SUB_BH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_565
				ret
                
			SKIP_565:
				mov di, offset SUB_BH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_566
				ret
                
			SKIP_566:
				mov di, offset SUB_BH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_567
				ret
                
			SKIP_567:
				mov di, offset SUB_BH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_568
				ret
                
			SKIP_568:
				mov di, offset SUB_BH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_569
				ret
                
			SKIP_569:
				mov di, offset SUB_BH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_570
				ret
                
			SKIP_570:
				mov di, offset SUB_BH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_571
				ret
                
			SKIP_571:
				mov di, offset SUB_BH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_572
				ret
                
			SKIP_572:
				mov di, offset SUB_BH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_573
				ret
                
			SKIP_573:
				mov di, offset SUB_BL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_574
				ret
                
			SKIP_574:
				mov di, offset SUB_BL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_575
				ret
                
			SKIP_575:
				mov di, offset SUB_BL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_576
				ret
                
			SKIP_576:
				mov di, offset SUB_BL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_577
				ret
                
			SKIP_577:
				mov di, offset SUB_BL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_578
				ret
                
			SKIP_578:
				mov di, offset SUB_BL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_579
				ret
                
			SKIP_579:
				mov di, offset SUB_BL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_580
				ret
                
			SKIP_580:
				mov di, offset SUB_BL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_581
				ret
                
			SKIP_581:
				mov di, offset SUB_BL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_582
				ret
                
			SKIP_582:
				mov di, offset SUB_BL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_583
				ret
                
			SKIP_583:
				mov di, offset SUB_BL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_584
				ret
                
			SKIP_584:
				mov di, offset SUB_BL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_585
				ret
                
			SKIP_585:
				mov di, offset SUB_CH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_586
				ret
                
			SKIP_586:
				mov di, offset SUB_CH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_587
				ret
                
			SKIP_587:
				mov di, offset SUB_CH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_588
				ret
                
			SKIP_588:
				mov di, offset SUB_CH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_589
				ret
                
			SKIP_589:
				mov di, offset SUB_CH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_590
				ret
                
			SKIP_590:
				mov di, offset SUB_CH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_591
				ret
                
			SKIP_591:
				mov di, offset SUB_CH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_592
				ret
                
			SKIP_592:
				mov di, offset SUB_CH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_593
				ret
                
			SKIP_593:
				mov di, offset SUB_CH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_594
				ret
                
			SKIP_594:
				mov di, offset SUB_CH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_595
				ret
                
			SKIP_595:
				mov di, offset SUB_CH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_596
				ret
                
			SKIP_596:
				mov di, offset SUB_CH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_597
				ret
                
			SKIP_597:
				mov di, offset SUB_CL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_598
				ret
                
			SKIP_598:
				mov di, offset SUB_CL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_599
				ret
                
			SKIP_599:
				mov di, offset SUB_CL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_600
				ret
                
			SKIP_600:
				mov di, offset SUB_CL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_601
				ret
                
			SKIP_601:
				mov di, offset SUB_CL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_602
				ret
                
			SKIP_602:
				mov di, offset SUB_CL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_603
				ret
                
			SKIP_603:
				mov di, offset SUB_CL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_604
				ret
                
			SKIP_604:
				mov di, offset SUB_CL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_605
				ret
                
			SKIP_605:
				mov di, offset SUB_CL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_606
				ret
                
			SKIP_606:
				mov di, offset SUB_CL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_607
				ret
                
			SKIP_607:
				mov di, offset SUB_CL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_608
				ret
                
			SKIP_608:
				mov di, offset SUB_CL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_609
				ret
                
			SKIP_609:
				mov di, offset SUB_DL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_610
				ret
                
			SKIP_610:
				mov di, offset SUB_DL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_611
				ret
                
			SKIP_611:
				mov di, offset SUB_DL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_612
				ret
                
			SKIP_612:
				mov di, offset SUB_DL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_613
				ret
                
			SKIP_613:
				mov di, offset SUB_DL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_614
				ret
                
			SKIP_614:
				mov di, offset SUB_DL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_615
				ret
                
			SKIP_615:
				mov di, offset SUB_DL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_616
				ret
                
			SKIP_616:
				mov di, offset SUB_DL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_617
				ret
                
			SKIP_617:
				mov di, offset SUB_DL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_618
				ret
                
			SKIP_618:
				mov di, offset SUB_DL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_619
				ret
                
			SKIP_619:
				mov di, offset SUB_DL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_620
				ret
                
			SKIP_620:
				mov di, offset SUB_DL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_621
				ret
                
			SKIP_621:
				mov di, offset SUB_DH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_622
				ret
                
			SKIP_622:
				mov di, offset SUB_DH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_623
				ret
                
			SKIP_623:
				mov di, offset SUB_DH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_624
				ret
                
			SKIP_624:
				mov di, offset SUB_DH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_625
				ret
                
			SKIP_625:
				mov di, offset SUB_DH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_626
				ret
                
			SKIP_626:
				mov di, offset SUB_DH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_627
				ret
                
			SKIP_627:
				mov di, offset SUB_DH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_628
				ret
                
			SKIP_628:
				mov di, offset SUB_DH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_629
				ret
                
			SKIP_629:
				mov di, offset SUB_DH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_630
				ret
                
			SKIP_630:
				mov di, offset SUB_DH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_631
				ret
                
			SKIP_631:
				mov di, offset SUB_DH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_632
				ret
                
			SKIP_632:
				mov di, offset SUB_DH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_633
				ret
                
			SKIP_633:
				mov di, offset SUB_SI_COLON_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_634
				ret
                
			SKIP_634:
				mov di, offset SUB_SI_COLON_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_635
				ret
                
			SKIP_635:
				mov di, offset SUB_SI_COLON_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_636
				ret
                
			SKIP_636:
				mov di, offset SUB_SI_COLON_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_637
				ret
                
			SKIP_637:
				mov di, offset SUB_SI_COLON_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_638
				ret
                
			SKIP_638:
				mov di, offset SUB_SI_COLON_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_639
				ret
                
			SKIP_639:
				mov di, offset SUB_SI_COLON_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_640
				ret
                
			SKIP_640:
				mov di, offset SUB_SI_COLON_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_644	
				ret
                
			SKIP_644:
				mov di, offset SUB_SI_COLON_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_645
				ret
                
			SKIP_645:
				mov di, offset SUB_DI_COLON_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_646
				ret
                
			SKIP_646:
				mov di, offset SUB_DI_COLON_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_647
				ret
                
			SKIP_647:
				mov di, offset SUB_DI_COLON_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_648
				ret
                
			SKIP_648:
				mov di, offset SUB_DI_COLON_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_649
				ret
                
			SKIP_649:
				mov di, offset SUB_DI_COLON_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_650
				ret
                
			SKIP_650:
				mov di, offset SUB_DI_COLON_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_651
				ret
                
			SKIP_651:
				mov di, offset SUB_DI_COLON_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_652
				ret
                
			SKIP_652:
				mov di, offset SUB_DI_COLON_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_656
				ret

			SKIP_656:
				mov di, offset SUB_DI_COLON_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_657
				ret
                
			SKIP_657:
				mov di, offset SUB_BX_COLON_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_658
				ret
                
			SKIP_658:
				mov di, offset SUB_BX_COLON_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_659
				ret
                
			SKIP_659:
				mov di, offset SUB_BX_COLON_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_660
				ret
                
			SKIP_660:
				mov di, offset SUB_BX_COLON_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_661
				ret
                
			SKIP_661:
				mov di, offset SUB_BX_COLON_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_662
				ret
                
			SKIP_662:
				mov di, offset SUB_BX_COLON_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_663
				ret
                
			SKIP_663:
				mov di, offset SUB_BX_COLON_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_664
				ret
                
			SKIP_664:
				mov di, offset SUB_BX_COLON_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_665
				ret
                
			SKIP_665:
				mov di, offset SUB_BX_COLON_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_666
				ret

            SKIP_666:
				mov di, offset SUB_AX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_667
				ret
                
			SKIP_667:
				mov di, offset SUB_AX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_668
				ret
                
			SKIP_668:
				mov di, offset SUB_AX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_669
				ret
                
			SKIP_669:
				mov di, offset SUB_AX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_670
				ret
                
			SKIP_670:
				mov di, offset SUB_AX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_671
				ret
                
			SKIP_671:
				mov di, offset SUB_AX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_672
				ret
                
			SKIP_672:
				mov di, offset SUB_AX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_673
				ret
                
			SKIP_673:
				mov di, offset SUB_AX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_674
				ret
                
			SKIP_674:
				mov di, offset SUB_AX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_675
				ret
                
			SKIP_675:
				mov di, offset SUB_AX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_676
				ret
                
			SKIP_676:
				mov di, offset SUB_AX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_677
				ret
                
			SKIP_677:
				mov di, offset SUB_AX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_678
				ret
                
			SKIP_678:
				mov di, offset SUB_BX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_679
				ret
                
			SKIP_679:
				mov di, offset SUB_BX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_680
				ret
                
			SKIP_680:
				mov di, offset SUB_BX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_681
				ret
                
			SKIP_681:
				mov di, offset SUB_BX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_682
				ret
                
			SKIP_682:
				mov di, offset SUB_BX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_683
				ret
                
			SKIP_683:
				mov di, offset SUB_BX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_684
				ret
                
			SKIP_684:
				mov di, offset SUB_BX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_685
				ret
                
			SKIP_685:
				mov di, offset SUB_BX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_686
				ret
                
			SKIP_686:
				mov di, offset SUB_BX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_687
				ret
                
			SKIP_687:
				mov di, offset SUB_BX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_688
				ret
                
			SKIP_688:
				mov di, offset SUB_BX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_689
				ret
                
			SKIP_689:
				mov di, offset SUB_BX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_690
				ret
                
			SKIP_690:
				mov di, offset SUB_CX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_691
				ret
                
			SKIP_691:
				mov di, offset SUB_CX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_692
				ret
                
			SKIP_692:
				mov di, offset SUB_CX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_693
				ret
                
			SKIP_693:
				mov di, offset SUB_CX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_694
				ret
                
			SKIP_694:
				mov di, offset SUB_CX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_695
				ret
                
			SKIP_695:
				mov di, offset SUB_CX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_696
				ret
                
			SKIP_696:
				mov di, offset SUB_CX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_697
				ret
                
			SKIP_697:
				mov di, offset SUB_CX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_698
				ret
                
			SKIP_698:
				mov di, offset SUB_CX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_699
				ret
                
			SKIP_699:
				mov di, offset SUB_CX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_700
				ret
                
			SKIP_700:
				mov di, offset SUB_CX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_701
				ret
                
			SKIP_701:
				mov di, offset SUB_CX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_702
				ret
                
			SKIP_702:
				mov di, offset SUB_DX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_703
				ret
                
			SKIP_703:
				mov di, offset SUB_DX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_704
				ret
                
			SKIP_704:
				mov di, offset SUB_DX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_705
				ret
                
			SKIP_705:
				mov di, offset SUB_DX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_706
				ret
                
			SKIP_706:
				mov di, offset SUB_DX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_707
				ret
                
			SKIP_707:
				mov di, offset SUB_DX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_708
				ret
                
			SKIP_708:
				mov di, offset SUB_DX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_709
				ret
                
			SKIP_709:
				mov di, offset SUB_DX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_710
				ret
                
			SKIP_710:
				mov di, offset SUB_DX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_711
				ret
                
			SKIP_711:
				mov di, offset SUB_DX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_712
				ret
                
			SKIP_712:
				mov di, offset SUB_DX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_713
				ret
                
			SKIP_713:
				mov di, offset SUB_DX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_714
				ret
                
			SKIP_714:
				mov di, offset SUB_SI_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_715
				ret
                
			SKIP_715:
				mov di, offset SUB_SI_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_716
				ret
                
			SKIP_716:
				mov di, offset SUB_SI_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_717
				ret
                
			SKIP_717:
				mov di, offset SUB_SI_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_718
				ret
                
			SKIP_718:
				mov di, offset SUB_SI_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_719
				ret
                
			SKIP_719:
				mov di, offset SUB_SI_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_720
				ret
                
			SKIP_720:
				mov di, offset SUB_SI_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_721
				ret
                
			SKIP_721:
				mov di, offset SUB_SI_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_722
				ret
                
			SKIP_722:
				mov di, offset SUB_SI_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_723
				ret
                
			SKIP_723:
				mov di, offset SUB_SI_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_724
				ret
                
			SKIP_724:
				mov di, offset SUB_SI_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_725
				ret
                
			SKIP_725:
				mov di, offset SUB_SI_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_726
				ret
                
			SKIP_726:
				mov di, offset SUB_DI_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_727
				ret
                
			SKIP_727:
				mov di, offset SUB_DI_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_728
				ret
                
			SKIP_728:
				mov di, offset SUB_DI_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_729
				ret
                
			SKIP_729:
				mov di, offset SUB_DI_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_730
				ret
                
			SKIP_730:
				mov di, offset SUB_DI_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_731
				ret
                
			SKIP_731:
				mov di, offset SUB_DI_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_732
				ret
                
			SKIP_732:
				mov di, offset SUB_DI_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_733
				ret
                
			SKIP_733:
				mov di, offset SUB_DI_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_734
				ret
                
			SKIP_734:
				mov di, offset SUB_DI_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_735
				ret
                
			SKIP_735:
				mov di, offset SUB_DI_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_736
				ret
                
			SKIP_736:
				mov di, offset SUB_DI_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_737
				ret
                
			SKIP_737:
				mov di, offset SUB_DI_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_738
				ret
                
			SKIP_738:
				mov di, offset SUB_BP_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_739
				ret
                
			SKIP_739:
				mov di, offset SUB_BP_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_740
				ret
                
			SKIP_740:
				mov di, offset SUB_BP_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_741
				ret
                
			SKIP_741:
				mov di, offset SUB_BP_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_742
				ret
                
			SKIP_742:
				mov di, offset SUB_BP_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_743
				ret
                
			SKIP_743:
				mov di, offset SUB_BP_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_744
				ret
                
			SKIP_744:
				mov di, offset SUB_BP_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_745
				ret
                
			SKIP_745:
				mov di, offset SUB_BP_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_746
				ret
                
			SKIP_746:
				mov di, offset SUB_BP_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_747
				ret
                
			SKIP_747:
				mov di, offset SUB_BP_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_748
				ret
                
			SKIP_748:
				mov di, offset SUB_BP_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_749
				ret
                
			SKIP_749:
				mov di, offset SUB_BP_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_750
				ret
                
			SKIP_750:
				mov di, offset SUB_SP_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_751
				ret
                
			SKIP_751:
				mov di, offset SUB_SP_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_752
				ret
                
			SKIP_752:
				mov di, offset SUB_SP_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_753
				ret
                
			SKIP_753:
				mov di, offset SUB_SP_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_754
				ret
                
			SKIP_754:
				mov di, offset SUB_SP_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_755
				ret
                
			SKIP_755:
				mov di, offset SUB_SP_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_756
				ret
                
			SKIP_756:
				mov di, offset SUB_SP_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_757
				ret
                
			SKIP_757:
				mov di, offset SUB_SP_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_758
				ret
                
			SKIP_758:
				mov di, offset SUB_SP_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_759
				ret
                
			SKIP_759:
				mov di, offset SUB_SP_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_760
				ret
                
			SKIP_760:
				mov di, offset SUB_SP_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_761
				ret
                
			SKIP_761:
				mov di, offset SUB_SP_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_762
				ret
                
			SKIP_762:
				mov di, offset SUB_SI_COLON_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_763
				ret
                
			SKIP_763:
				mov di, offset SUB_SI_COLON_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_764
				ret
                
			SKIP_764:
				mov di, offset SUB_SI_COLON_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_765
				ret
                
			SKIP_765:
				mov di, offset SUB_SI_COLON_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_766
				ret
                
			SKIP_766:
				mov di, offset SUB_SI_COLON_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_767
				ret
                
			SKIP_767:
				mov di, offset SUB_SI_COLON_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_768
				ret
                
			SKIP_768:
				mov di, offset SUB_SI_COLON_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_769
				ret
                
			SKIP_769:
				mov di, offset SUB_SI_COLON_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_773
				ret
                
			SKIP_773:
				mov di, offset SUB_SI_COLONW_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_774
				ret
                
			SKIP_774:
				mov di, offset SUB_DI_COLON_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_775
				ret
                
			SKIP_775:
				mov di, offset SUB_DI_COLON_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_776
				ret
                
			SKIP_776:
				mov di, offset SUB_DI_COLON_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_777
				ret
                
			SKIP_777:
				mov di, offset SUB_DI_COLON_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_778
				ret
                
			SKIP_778:
				mov di, offset SUB_DI_COLON_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_779
				ret
                
			SKIP_779:
				mov di, offset SUB_DI_COLON_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_780
				ret
                
			SKIP_780:
				mov di, offset SUB_DI_COLON_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_781
				ret
                
			SKIP_781:
				mov di, offset SUB_DI_COLON_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_785
				ret
                
			SKIP_785:
				mov di, offset SUB_DI_COLONW_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_786
				ret
                
			SKIP_786:
				mov di, offset SUB_BX_COLON_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_787
				ret
                
			SKIP_787:
				mov di, offset SUB_BX_COLON_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_788
				ret
                
			SKIP_788:
				mov di, offset SUB_BX_COLON_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_789
				ret
                
			SKIP_789:
				mov di, offset SUB_BX_COLON_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_790
				ret
                
			SKIP_790:
				mov di, offset SUB_BX_COLON_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_791
				ret
                
			SKIP_791:
				mov di, offset SUB_BX_COLON_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_792
				ret
                
			SKIP_792:
				mov di, offset SUB_BX_COLON_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_793
				ret
                
			SKIP_793:
				mov di, offset SUB_BX_COLON_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_797
				ret
                
			SKIP_797:
				mov di, offset SUB_BX_COLONW_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_798
				ret

			SKIP_798:
				mov di, offset CMP_AX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_799
				ret
                
			SKIP_799:
				mov di, offset CMP_AX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_800
				ret
                
			SKIP_800:
				mov di, offset CMP_AX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_801
				ret
                
			SKIP_801:
				mov di, offset CMP_AX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_802
				ret
                
			SKIP_802:
				mov di, offset CMP_AX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_803
				ret
                
			SKIP_803:
				mov di, offset CMP_AX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_804
				ret
                
			SKIP_804:
				mov di, offset CMP_AX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_805
				ret
                
			SKIP_805:
				mov di, offset CMP_AX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_806
				ret
                
			SKIP_806:
				mov di, offset CMP_AX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_807
				ret
                
			SKIP_807:
				mov di, offset CMP_AX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_808
				ret
                
			SKIP_808:
				mov di, offset CMP_AX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_809
				ret
                
			SKIP_809:
				mov di, offset CMP_AX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_810
				ret
                
			SKIP_810:
				mov di, offset CMP_BX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_811
				ret
                
			SKIP_811:
				mov di, offset CMP_BX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_812
				ret
                
			SKIP_812:
				mov di, offset CMP_BX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_813
				ret
                
			SKIP_813:
				mov di, offset CMP_BX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_814
				ret
                
			SKIP_814:
				mov di, offset CMP_BX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_815
				ret
                
			SKIP_815:
				mov di, offset CMP_BX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_816
				ret
                
			SKIP_816:
				mov di, offset CMP_BX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_817
				ret
                
			SKIP_817:
				mov di, offset CMP_BX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_818
				ret
                
			SKIP_818:
				mov di, offset CMP_BX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_819
				ret
                
			SKIP_819:
				mov di, offset CMP_BX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_820
				ret
                
			SKIP_820:
				mov di, offset CMP_BX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_821
				ret
                
			SKIP_821:
				mov di, offset CMP_BX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_822
				ret
                
			SKIP_822:
				mov di, offset CMP_CX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_823
				ret
                
			SKIP_823:
				mov di, offset CMP_CX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_824
				ret
                
			SKIP_824:
				mov di, offset CMP_CX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_825
				ret
                
			SKIP_825:
				mov di, offset CMP_CX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_826
				ret
                
			SKIP_826:
				mov di, offset CMP_CX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_827
				ret
                
			SKIP_827:
				mov di, offset CMP_CX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_828
				ret
                
			SKIP_828:
				mov di, offset CMP_CX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_829
				ret
                
			SKIP_829:
				mov di, offset CMP_CX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_830
				ret
                
			SKIP_830:
				mov di, offset CMP_CX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_831
				ret
                
			SKIP_831:
				mov di, offset CMP_CX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_832
				ret
                
			SKIP_832:
				mov di, offset CMP_CX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_833
				ret
                
			SKIP_833:
				mov di, offset CMP_CX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_834
				ret
                
			SKIP_834:
				mov di, offset CMP_DX_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_835
				ret
                
			SKIP_835:
				mov di, offset CMP_DX_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_836
				ret
                
			SKIP_836:
				mov di, offset CMP_DX_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_837
				ret
                
			SKIP_837:
				mov di, offset CMP_DX_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_838
				ret
                
			SKIP_838:
				mov di, offset CMP_DX_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_839
				ret
                
			SKIP_839:
				mov di, offset CMP_DX_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_840
				ret
                
			SKIP_840:
				mov di, offset CMP_DX_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_841
				ret
                
			SKIP_841:
				mov di, offset CMP_DX_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_842
				ret
                
			SKIP_842:
				mov di, offset CMP_DX_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_843
				ret
                
			SKIP_843:
				mov di, offset CMP_DX_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_844
				ret
                
			SKIP_844:
				mov di, offset CMP_DX_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_845
				ret
                
			SKIP_845:
				mov di, offset CMP_DX_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_846
				ret
                
			SKIP_846:
				mov di, offset CMP_SI_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_847
				ret
                
			SKIP_847:
				mov di, offset CMP_SI_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_848
				ret
                
			SKIP_848:
				mov di, offset CMP_SI_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_849
				ret
                
			SKIP_849:
				mov di, offset CMP_SI_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_850
				ret
                
			SKIP_850:
				mov di, offset CMP_SI_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_851
				ret
                
			SKIP_851:
				mov di, offset CMP_SI_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_852
				ret
                
			SKIP_852:
				mov di, offset CMP_SI_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_853
				ret
                
			SKIP_853:
				mov di, offset CMP_SI_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_854
				ret
                
			SKIP_854:
				mov di, offset CMP_SI_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_855
				ret
                
			SKIP_855:
				mov di, offset CMP_SI_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_856
				ret
                
			SKIP_856:
				mov di, offset CMP_SI_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_857
				ret
                
			SKIP_857:
				mov di, offset CMP_SI_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_858
				ret
                
			SKIP_858:
				mov di, offset CMP_DI_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_859
				ret
                
			SKIP_859:
				mov di, offset CMP_DI_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_860
				ret
                
			SKIP_860:
				mov di, offset CMP_DI_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_861
				ret
                
			SKIP_861:
				mov di, offset CMP_DI_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_862
				ret
                
			SKIP_862:
				mov di, offset CMP_DI_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_863
				ret
                
			SKIP_863:
				mov di, offset CMP_DI_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_864
				ret
                
			SKIP_864:
				mov di, offset CMP_DI_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_865
				ret
                
			SKIP_865:
				mov di, offset CMP_DI_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_866
				ret
                
			SKIP_866:
				mov di, offset CMP_DI_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_867
				ret
                
			SKIP_867:
				mov di, offset CMP_DI_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_868
				ret
                
			SKIP_868:
				mov di, offset CMP_DI_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_869
				ret
                
			SKIP_869:
				mov di, offset CMP_DI_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_870
				ret
                
			SKIP_870:
				mov di, offset CMP_BP_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_871
				ret
                
			SKIP_871:
				mov di, offset CMP_BP_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_872
				ret
                
			SKIP_872:
				mov di, offset CMP_BP_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_873
				ret
                
			SKIP_873:
				mov di, offset CMP_BP_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_874
				ret
                
			SKIP_874:
				mov di, offset CMP_BP_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_875
				ret
                
			SKIP_875:
				mov di, offset CMP_BP_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_876
				ret
                
			SKIP_876:
				mov di, offset CMP_BP_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_877
				ret
                
			SKIP_877:
				mov di, offset CMP_BP_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_878
				ret
                
			SKIP_878:
				mov di, offset CMP_BP_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_879
				ret
                
			SKIP_879:
				mov di, offset CMP_BP_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_880
				ret
                
			SKIP_880:
				mov di, offset CMP_BP_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_881
				ret
                
			SKIP_881:
				mov di, offset CMP_BP_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_882
				ret
                
			SKIP_882:
				mov di, offset CMP_SP_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_883
				ret
                
			SKIP_883:
				mov di, offset CMP_SP_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_884
				ret
                
			SKIP_884:
				mov di, offset CMP_SP_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_885
				ret
                
			SKIP_885:
				mov di, offset CMP_SP_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_886
				ret
                
			SKIP_886:
				mov di, offset CMP_SP_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_887
				ret
                
			SKIP_887:
				mov di, offset CMP_SP_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_888
				ret
                
			SKIP_888:
				mov di, offset CMP_SP_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_889
				ret
                
			SKIP_889:
				mov di, offset CMP_SP_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_890
				ret
                
			SKIP_890:
				mov di, offset CMP_SP_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_891
				ret
                
			SKIP_891:
				mov di, offset CMP_SP_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_892
				ret
                
			SKIP_892:
				mov di, offset CMP_SP_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_893
				ret
                
			SKIP_893:
				mov di, offset CMP_SP_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_894
				ret
                
			SKIP_894:
				mov di, offset CMP_SI_COLON_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_895
				ret
                
			SKIP_895:
				mov di, offset CMP_SI_COLON_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_896
				ret
                
			SKIP_896:
				mov di, offset CMP_SI_COLON_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_897
				ret
                
			SKIP_897:
				mov di, offset CMP_SI_COLON_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_898
				ret
                
			SKIP_898:
				mov di, offset CMP_SI_COLON_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_899
				ret
                
			SKIP_899:
				mov di, offset CMP_SI_COLON_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_900
				ret
                
			SKIP_900:
				mov di, offset CMP_SI_COLON_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_901
				ret
                
			SKIP_901:
				mov di, offset CMP_SI_COLON_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_902
				ret
                
			SKIP_902:
				mov di, offset CMP_SI_COLON_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_906
				ret
                
			SKIP_906:
				mov di, offset CMP_DI_COLON_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_907
				ret
                
			SKIP_907:
				mov di, offset CMP_DI_COLON_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_908
				ret
                
			SKIP_908:
				mov di, offset CMP_DI_COLON_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_909
				ret
                
			SKIP_909:
				mov di, offset CMP_DI_COLON_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_910
				ret
                
			SKIP_910:
				mov di, offset CMP_DI_COLON_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_911
				ret
                
			SKIP_911:
				mov di, offset CMP_DI_COLON_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_912
				ret
                
			SKIP_912:
				mov di, offset CMP_DI_COLON_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_913
				ret
                
			SKIP_913:
				mov di, offset CMP_DI_COLON_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_917
				ret
                
			SKIP_917:
				mov di, offset CMP_DI_COLON_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_918
				ret
                
			SKIP_918:
				mov di, offset CMP_BX_COLON_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_919
				ret
                
			SKIP_919:
				mov di, offset CMP_BX_COLON_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_920
				ret
                
			SKIP_920:
				mov di, offset CMP_BX_COLON_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_921
				ret
                
			SKIP_921:
				mov di, offset CMP_BX_COLON_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_922
				ret
                
			SKIP_922:
				mov di, offset CMP_BX_COLON_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_923
				ret
                
			SKIP_923:
				mov di, offset CMP_BX_COLON_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_924
				ret
                
			SKIP_924:
				mov di, offset CMP_BX_COLON_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_925
				ret
                
			SKIP_925:
				mov di, offset CMP_BX_COLON_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_929
				ret
                
			SKIP_929:
				mov di, offset CMP_BX_COLON_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_930
				ret
			SKIP_930:
				mov di, offset CMP_AH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_931
				ret
                
			SKIP_931:
				mov di, offset CMP_AH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_932
				ret
                
			SKIP_932:
				mov di, offset CMP_AH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_933
				ret
                
			SKIP_933:
				mov di, offset CMP_AH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_934
				ret
                
			SKIP_934:
				mov di, offset CMP_AH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_935
				ret
                
			SKIP_935:
				mov di, offset CMP_AH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_936
				ret
                
			SKIP_936:
				mov di, offset CMP_AH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_937
				ret
                
			SKIP_937:
				mov di, offset CMP_AH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_938
				ret
                
			SKIP_938:
				mov di, offset CMP_AH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_939
				ret
                
			SKIP_939:
				mov di, offset CMP_AH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_940
				ret
                
			SKIP_940:
				mov di, offset CMP_AH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_941
				ret
                
			SKIP_941:
				mov di, offset CMP_AH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_942
				ret
                
			SKIP_942:
				mov di, offset CMP_AL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_943
				ret
                
			SKIP_943:
				mov di, offset CMP_AL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_944
				ret
                
			SKIP_944:
				mov di, offset CMP_AL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_945
				ret
                
			SKIP_945:
				mov di, offset CMP_AL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_946
				ret
                
			SKIP_946:
				mov di, offset CMP_AL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_947
				ret
                
			SKIP_947:
				mov di, offset CMP_AL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_948
				ret
                
			SKIP_948:
				mov di, offset CMP_AL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_949
				ret
                
			SKIP_949:
				mov di, offset CMP_AL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_950
				ret
                
			SKIP_950:
				mov di, offset CMP_AL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_951
				ret
                
			SKIP_951:
				mov di, offset CMP_AL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_952
				ret
                
			SKIP_952:
				mov di, offset CMP_AL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_953
				ret
                
			SKIP_953:
				mov di, offset CMP_AL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_954
				ret
                
			SKIP_954:
				mov di, offset CMP_BH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_955
				ret
                
			SKIP_955:
				mov di, offset CMP_BH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_956
				ret
                
			SKIP_956:
				mov di, offset CMP_BH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_957
				ret
                
			SKIP_957:
				mov di, offset CMP_BH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_958
				ret
                
			SKIP_958:
				mov di, offset CMP_BH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_959
				ret
                
			SKIP_959:
				mov di, offset CMP_BH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_960
				ret
                
			SKIP_960:
				mov di, offset CMP_BH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_961
				ret
                
			SKIP_961:
				mov di, offset CMP_BH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_962
				ret
                
			SKIP_962:
				mov di, offset CMP_BH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_963
				ret
                
			SKIP_963:
				mov di, offset CMP_BH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_964
				ret
                
			SKIP_964:
				mov di, offset CMP_BH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_965
				ret
                
			SKIP_965:
				mov di, offset CMP_BH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_966
				ret
                
			SKIP_966:
				mov di, offset CMP_BL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_967
				ret
                
			SKIP_967:
				mov di, offset CMP_BL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_968
				ret
                
			SKIP_968:
				mov di, offset CMP_BL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_969
				ret
                
			SKIP_969:
				mov di, offset CMP_BL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_970
				ret
                
			SKIP_970:
				mov di, offset CMP_BL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_971
				ret
                
			SKIP_971:
				mov di, offset CMP_BL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_972
				ret
                
			SKIP_972:
				mov di, offset CMP_BL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_973
				ret
                
			SKIP_973:
				mov di, offset CMP_BL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_974
				ret
                
			SKIP_974:
				mov di, offset CMP_BL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_975
				ret
                
			SKIP_975:
				mov di, offset CMP_BL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_976
				ret
                
			SKIP_976:
				mov di, offset CMP_BL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_977
				ret
                
			SKIP_977:
				mov di, offset CMP_BL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_978
				ret
                
			SKIP_978:
				mov di, offset CMP_CH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_979
				ret
                
			SKIP_979:
				mov di, offset CMP_CH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_980
				ret
                
			SKIP_980:
				mov di, offset CMP_CH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_981
				ret
                
			SKIP_981:
				mov di, offset CMP_CH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_982
				ret
                
			SKIP_982:
				mov di, offset CMP_CH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_983
				ret
                
			SKIP_983:
				mov di, offset CMP_CH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_984
				ret
                
			SKIP_984:
				mov di, offset CMP_CH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_985
				ret
                
			SKIP_985:
				mov di, offset CMP_CH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_986
				ret
                
			SKIP_986:
				mov di, offset CMP_CH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_987
				ret
                
			SKIP_987:
				mov di, offset CMP_CH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_988
				ret
                
			SKIP_988:
				mov di, offset CMP_CH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_989
				ret
                
			SKIP_989:
				mov di, offset CMP_CH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_990
				ret
                
			SKIP_990:
				mov di, offset CMP_CL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_991
				ret
                
			SKIP_991:
				mov di, offset CMP_CL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_992
				ret
                
			SKIP_992:
				mov di, offset CMP_CL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_993
				ret
                
			SKIP_993:
				mov di, offset CMP_CL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_994
				ret
                
			SKIP_994:
				mov di, offset CMP_CL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_995
				ret
                
			SKIP_995:
				mov di, offset CMP_CL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_996
				ret
                
			SKIP_996:
				mov di, offset CMP_CL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_997
				ret
                
			SKIP_997:
				mov di, offset CMP_CL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_998
				ret
                
			SKIP_998:
				mov di, offset CMP_CL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_999
				ret
                
			SKIP_999:
				mov di, offset CMP_CL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1000
				ret
                
			SKIP_1000:
				mov di, offset CMP_CL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1001
				ret
                
			SKIP_1001:
				mov di, offset CMP_CL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_1002
				ret
                
			SKIP_1002:
				mov di, offset CMP_DL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1003
				ret
                
			SKIP_1003:
				mov di, offset CMP_DL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1004
				ret
                
			SKIP_1004:
				mov di, offset CMP_DL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1005
				ret
                
			SKIP_1005:
				mov di, offset CMP_DL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1006
				ret
                
			SKIP_1006:
				mov di, offset CMP_DL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1007
				ret
                
			SKIP_1007:
				mov di, offset CMP_DL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1008
				ret
                
			SKIP_1008:
				mov di, offset CMP_DL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1009
				ret
                
			SKIP_1009:
				mov di, offset CMP_DL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1010
				ret
                
			SKIP_1010:
				mov di, offset CMP_DL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1011
				ret
                
			SKIP_1011:
				mov di, offset CMP_DL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1012
				ret
                
			SKIP_1012:
				mov di, offset CMP_DL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1013
				ret
                
			SKIP_1013:
				mov di, offset CMP_DL_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_1014
				ret
                
			SKIP_1014:
				mov di, offset CMP_DH_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1015
				ret
                
			SKIP_1015:
				mov di, offset CMP_DH_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1016
				ret
                
			SKIP_1016:
				mov di, offset CMP_DH_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1017
				ret
                
			SKIP_1017:
				mov di, offset CMP_DH_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1018
				ret
                
			SKIP_1018:
				mov di, offset CMP_DH_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1019
				ret
                
			SKIP_1019:
				mov di, offset CMP_DH_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1020
				ret
                
			SKIP_1020:
				mov di, offset CMP_DH_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1021
				ret
                
			SKIP_1021:
				mov di, offset CMP_DH_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1022
				ret
                
			SKIP_1022:
				mov di, offset CMP_DH_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1023
				ret
                
			SKIP_1023:
				mov di, offset CMP_DH_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1024
				ret
                
			SKIP_1024:
				mov di, offset CMP_DH_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1025
				ret
                
			SKIP_1025:
				mov di, offset CMP_DH_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_1026
				ret
                
			SKIP_1026:
				mov di, offset CMP_SI_COLON_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1027
				ret
                
			SKIP_1027:
				mov di, offset CMP_SI_COLON_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1028
				ret
                
			SKIP_1028:
				mov di, offset CMP_SI_COLON_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1029
				ret
                
			SKIP_1029:
				mov di, offset CMP_SI_COLON_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1030
				ret
                
			SKIP_1030:
				mov di, offset CMP_SI_COLON_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1031
				ret
                
			SKIP_1031:
				mov di, offset CMP_SI_COLON_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1032
				ret
                
			SKIP_1032:
				mov di, offset CMP_SI_COLON_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1033
				ret
                
			SKIP_1033:
				mov di, offset CMP_SI_COLON_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1034
				ret
                
			SKIP_1034:
				mov di, offset CMP_SI_COLONB_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_1038
				ret
                
			SKIP_1038:
				mov di, offset CMP_DI_COLON_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1039
				ret
                
			SKIP_1039:
				mov di, offset CMP_DI_COLON_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1040
				ret
                
			SKIP_1040:
				mov di, offset CMP_DI_COLON_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1041
				ret
                
			SKIP_1041:
				mov di, offset CMP_DI_COLON_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1042
				ret
                
			SKIP_1042:
				mov di, offset CMP_DI_COLON_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1043
				ret
                
			SKIP_1043:
				mov di, offset CMP_DI_COLON_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1044
				ret
                
			SKIP_1044:
				mov di, offset CMP_DI_COLON_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1045
				ret
                
			SKIP_1045:
				mov di, offset CMP_DI_COLON_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1049
				ret
                
			SKIP_1049:
				mov di, offset CMP_DI_COLONB_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_1050
				ret
                
			SKIP_1050:
				mov di, offset CMP_BX_COLON_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1051
				ret
                
			SKIP_1051:
				mov di, offset CMP_BX_COLON_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1052
				ret
                
			SKIP_1052:
				mov di, offset CMP_BX_COLON_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1053
				ret
                
			SKIP_1053:
				mov di, offset CMP_BX_COLON_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1054
				ret
                
			SKIP_1054:
				mov di, offset CMP_BX_COLON_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1055
				ret
                
			SKIP_1055:
				mov di, offset CMP_BX_COLON_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1056
				ret
                
			SKIP_1056:
				mov di, offset CMP_BX_COLON_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1057
				ret
                
			SKIP_1057:
				mov di, offset CMP_BX_COLON_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1058
				ret
                
			SKIP_1058:
				mov di, offset CMP_BX_COLONB_OFFSET
				call CheckIfGood
				cmp ax, 1
				je SKIP_1059
				ret

   			SKIP_1059:
				mov di, offset _JMP
				call CheckIfGood
				cmp ax, 1
				je SKIP_1060
				ret
                
			SKIP_1060:
				mov di, offset _JE
				call CheckIfGood
				cmp ax, 1
				je SKIP_1062
				ret
                
			SKIP_1062:
				mov di, offset _JNE
				call CheckIfGood
				cmp ax, 1
				je SKIP_1064
				ret

			SKIP_1064:
				mov di, offset _JG
				call CheckIfGood
				cmp ax, 1
				je SKIP_1066
				ret
                
			SKIP_1066:
				mov di, offset _JGE
				call CheckIfGood
				cmp ax, 1
				je SKIP_1068
				ret
                
			SKIP_1068:
				mov di, offset _JL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1070
				ret
                
			SKIP_1070:
				mov di, offset _JLE
				call CheckIfGood
				cmp ax, 1
				je SKIP_1072
				ret
                
			SKIP_1072:
				mov di, offset _JA
				call CheckIfGood
				cmp ax, 1
				je SKIP_1078
				ret
				
			SKIP_1078:
				mov di, offset _JBE
				call CheckIfGood
				cmp ax, 1
				je SKIP_1080
				ret
                
                
			SKIP_1080:
				mov di, offset _JC
				call CheckIfGood
				cmp ax, 1
				je SKIP_1081
				ret
                
			SKIP_1081:
				mov di, offset _JNC
				call CheckIfGood
				cmp ax, 1
				je SKIP_1082
				ret
                
			SKIP_1082:
				mov di, offset _JO
				call CheckIfGood
				cmp ax, 1
				je SKIP_1083
				ret
                
			SKIP_1083:
				mov di, offset _JNO
				call CheckIfGood
				cmp ax, 1
				je SKIP_1084
				ret
                
			SKIP_1084:
				mov di, offset _JP
				call CheckIfGood
				cmp ax, 1
				je SKIP_1086
				ret
                
			SKIP_1086:
				mov di, offset _JNP
				call CheckIfGood
				cmp ax, 1
				je SKIP_1088
				ret
                
			SKIP_1088:
				mov di, offset _JS
				call CheckIfGood
				cmp ax, 1
				je SKIP_1089
				ret
                
			SKIP_1089:
				mov di, offset _JNS
				call CheckIfGood
				cmp ax, 1
				je SKIP_1090
				ret
                
			SKIP_1090:
				mov di, offset _INT
				call CheckIfGood
				cmp ax, 1
				je SKIP_1091
				ret
                
			SKIP_1091:
				mov di, offset _LOOP
				call CheckIfGood
				cmp ax, 1
				je SKIP_1092
				ret
  
			SKIP_1092:
				mov di, offset _CALL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1093
				ret
	

			SKIP_1093:
				mov di, offset _RET
				call CheckIfGood
				cmp ax, 1
				je SKIP_1094
				ret
                
			SKIP_1094:
				mov di, offset INC_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1095
				ret
                
			SKIP_1095:
				mov di, offset INC_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1096
				ret
                
			SKIP_1096:
				mov di, offset INC_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1097
				ret
                
			SKIP_1097:
				mov di, offset INC_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1098
				ret
                
			SKIP_1098:
				mov di, offset INC_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1099
				ret
                
			SKIP_1099:
				mov di, offset INC_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1100
				ret
                
			SKIP_1100:
				mov di, offset INC_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1101
				ret
                
			SKIP_1101:
				mov di, offset INC_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1102
				ret
                
			SKIP_1102:
				mov di, offset INC_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1103
				ret
                
			SKIP_1103:
				mov di, offset INC_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1104
				ret
                
			SKIP_1104:
				mov di, offset INC_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1105
				ret
                
			SKIP_1105:
				mov di, offset INC_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1106
				ret
                
			SKIP_1106:
				mov di, offset INC_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1107
				ret
                
			SKIP_1107:
				mov di, offset INC_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1108
				ret
                
			SKIP_1108:
				mov di, offset INC_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1109
				ret
                
			SKIP_1109:
				mov di, offset INC_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_1110
				ret
                
			SKIP_1110:
				mov di, offset INC_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_1111
				ret
                
			SKIP_1111:
				mov di, offset INC_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_1112
				ret
                
			SKIP_1112:
				mov di, offset INC_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_1113
				ret
                
			SKIP_1113:
				mov di, offset INC_SI_COLONW
				call CheckIfGood
				cmp ax, 1
				je SKIP_1114
				ret
                
			SKIP_1114:
				mov di, offset INC_DI_COLONW
				call CheckIfGood
				cmp ax, 1
				je SKIP_1115
				ret
                
			SKIP_1115:
				mov di, offset INC_BX_COLONW
				call CheckIfGood
				cmp ax, 1
				je SKIP_1116
				ret
                
			SKIP_1116:
				mov di, offset DEC_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1117
				ret
                
			SKIP_1117:
				mov di, offset DEC_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1118
				ret
                
			SKIP_1118:
				mov di, offset DEC_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1119
				ret
                
			SKIP_1119:
				mov di, offset DEC_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1120
				ret
                
			SKIP_1120:
				mov di, offset DEC_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_1121
				ret
                
			SKIP_1121:
				mov di, offset DEC_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_1122
				ret
                
			SKIP_1122:
				mov di, offset DEC_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_1123
				ret
                
			SKIP_1123:
				mov di, offset DEC_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_1124
				ret
                
			SKIP_1124:
				mov di, offset DEC_SI_COLONW
				call CheckIfGood
				cmp ax, 1
				je SKIP_1125
				ret
                
			SKIP_1125:
				mov di, offset DEC_DI_COLONW
				call CheckIfGood
				cmp ax, 1
				je SKIP_1126
				ret
                
			SKIP_1126:
				mov di, offset DEC_BX_COLONW
				call CheckIfGood
				cmp ax, 1
				je SKIP_1127
				ret
                
			SKIP_1127:
				mov di, offset DEC_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1128
				ret
                
			SKIP_1128:
				mov di, offset DEC_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1129
				ret
                
			SKIP_1129:
				mov di, offset DEC_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1130
				ret
                
			SKIP_1130:
				mov di, offset DEC_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1131
				ret
                
			SKIP_1131:
				mov di, offset DEC_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1132
				ret
                
			SKIP_1132:
				mov di, offset DEC_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1133
				ret
                
			SKIP_1133:
				mov di, offset DEC_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1134
				ret
                
			SKIP_1134:
				mov di, offset DEC_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1135
				ret
                
			SKIP_1135:
				mov di, offset DEC_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1136
				ret
                
			SKIP_1136:
				mov di, offset DEC_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1137
				ret
                
			SKIP_1137:
				mov di, offset DEC_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1138
				ret
                
			SKIP_1138:
				mov di, offset MUL_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1139
				ret
                
			SKIP_1139:
				mov di, offset MUL_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1140
				ret
                
			SKIP_1140:
				mov di, offset MUL_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1141
				ret
                
			SKIP_1141:
				mov di, offset MUL_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1142
				ret
                
			SKIP_1142:
				mov di, offset MUL_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1143
				ret
                
			SKIP_1143:
				mov di, offset MUL_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1144
				ret
                
			SKIP_1144:
				mov di, offset MUL_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1145
				ret
                
			SKIP_1145:
				mov di, offset MUL_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1146
				ret
                
			SKIP_1146:
				mov di, offset MUL_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1147
				ret
                
			SKIP_1147:
				mov di, offset MUL_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1148
				ret
                
			SKIP_1148:
				mov di, offset MUL_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1149
				ret

			SKIP_1149:
				mov di, offset DIV_AH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1150
				ret
                
			SKIP_1150:
				mov di, offset DIV_AL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1151
				ret
                
			SKIP_1151:
				mov di, offset DIV_BH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1152
				ret
                
			SKIP_1152:
				mov di, offset DIV_BL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1153
				ret
                
			SKIP_1153:
				mov di, offset DIV_CH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1154
				ret
                
			SKIP_1154:
				mov di, offset DIV_CL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1155
				ret
                
			SKIP_1155:
				mov di, offset DIV_DL
				call CheckIfGood
				cmp ax, 1
				je SKIP_1156
				ret
                
			SKIP_1156:
				mov di, offset DIV_DH
				call CheckIfGood
				cmp ax, 1
				je SKIP_1157
				ret
                
			SKIP_1157:
				mov di, offset DIV_SI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1158
				ret
                
			SKIP_1158:
				mov di, offset DIV_DI_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1159
				ret
                
			SKIP_1159:
				mov di, offset DIV_BX_COLON
				call CheckIfGood
				cmp ax, 1
				je SKIP_1160
				ret
                
			SKIP_1160:
				mov di, offset DIV_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1161
				ret
                
			SKIP_1161:
				mov di, offset DIV_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1162
				ret
                
			SKIP_1162:
				mov di, offset DIV_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1163
				ret
                
			SKIP_1163:
				mov di, offset DIV_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1164
				ret
                
			SKIP_1164:
				mov di, offset DIV_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_1165
				ret
                
			SKIP_1165:
				mov di, offset DIV_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_1166
				ret
                
			SKIP_1166:
				mov di, offset DIV_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_1167
				ret
                
			SKIP_1167:
				mov di, offset DIV_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_1168
				ret
                
			SKIP_1168:
				mov di, offset DIV_SI_COLONW
				call CheckIfGood
				cmp ax, 1
				je SKIP_1169
				ret
                
			SKIP_1169:
				mov di, offset DIV_DI_COLONW
				call CheckIfGood
				cmp ax, 1
				je SKIP_1170
				ret
                
			SKIP_1170:
				mov di, offset DIV_BX_COLONW
				call CheckIfGood
				cmp ax, 1
				je SKIP_1173
				ret
                
			SKIP_1173:
				mov di, offset MUL_AX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1174
				ret
                
			SKIP_1174:
				mov di, offset MUL_BX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1175
				ret
                
			SKIP_1175:
				mov di, offset MUL_CX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1176
				ret
                
			SKIP_1176:
				mov di, offset MUL_DX
				call CheckIfGood
				cmp ax, 1
				je SKIP_1177
				ret
                
			SKIP_1177:
				mov di, offset MUL_SI
				call CheckIfGood
				cmp ax, 1
				je SKIP_1178
				ret
                
			SKIP_1178:
				mov di, offset MUL_DI
				call CheckIfGood
				cmp ax, 1
				je SKIP_1179
				ret
                
			SKIP_1179:
				mov di, offset MUL_BP
				call CheckIfGood
				cmp ax, 1
				je SKIP_1180
				ret
                
			SKIP_1180:
				mov di, offset MUL_SP
				call CheckIfGood
				cmp ax, 1
				je SKIP_1181
				ret
                
			SKIP_1181:
				mov di, offset MUL_SI_COLONW
				call CheckIfGood
				cmp ax, 1
				je SKIP_1182
				ret
                
			SKIP_1182:
				mov di, offset MUL_DI_COLONW
				call CheckIfGood
				cmp ax, 1
				je SKIP_1183
				ret
                
			SKIP_1183:
				mov di, offset MUL_BX_COLONW
				call CheckIfGood
				cmp ax, 1
				je SKIP_1184_
				ret

			SKIP_1184_:
				mov di, offset CMP_BX_COLON_OFFSETB
				call CheckIfGood
				cmp ax, 1
				je SKIP_1184
				ret

			SKIP_1184:
				mov di, offset CMP_SI_COLON_OFFSETB
				call CheckIfGood
				cmp ax, 1
				je SKIP_1185
				ret 
                
			SKIP_1185:
				mov di, offset CMP_DI_COLON_OFFSETB
				call CheckIfGood
				cmp ax, 1
				je SKIP_1187
				ret 
   
			SKIP_1187:
				mov di, offset CMP_BX_OFFSETB
				call CheckIfGood
				cmp ax, 1
				je SKIP_1188
				ret   	
				
			SKIP_1188:
				mov di, offset CMP_CX_OFFSETB
				call CheckIfGood
				cmp ax, 1
				je SKIP_1189
				ret   

			SKIP_1189:
				mov di, offset CMP_DX_OFFSETB
				call CheckIfGood
				cmp ax, 1
				je SKIP_1190
				ret   

			SKIP_1190:
				mov di, offset CMP_SI_OFFSETB
				call CheckIfGood
				cmp ax, 1
				je SKIP_1191
				ret   

			SKIP_1191:
				mov di, offset CMP_DI_OFFSETB
				call CheckIfGood
				cmp ax, 1
				je SKIP_1192
				ret   

			SKIP_1192:
				mov di, offset CMP_BP_OFFSETB
				call CheckIfGood
				cmp ax, 1
				je SKIP_1193
				ret  

			SKIP_1193:
				mov di, offset CMP_SP_OFFSETB
				call CheckIfGood
				ret   
		FindOpcode endp
end start

